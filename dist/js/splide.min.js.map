{"version":3,"file":"splide.min.js","sources":["../../src/js/constants/states.ts","../../src/js/constants/priority.ts","../../src/js/utils/array/empty/empty.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/array/forEach/forEach.ts","../../src/js/utils/array/includes/includes.ts","../../src/js/utils/array/push/push.ts","../../src/js/utils/array/index.ts","../../src/js/utils/arrayLike/slice/slice.ts","../../src/js/utils/dom/toggleClass/toggleClass.ts","../../src/js/utils/dom/addClass/addClass.ts","../../src/js/utils/dom/append/append.ts","../../src/js/utils/dom/before/before.ts","../../src/js/utils/dom/matches/matches.ts","../../src/js/utils/dom/children/children.ts","../../src/js/utils/dom/child/child.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/object/merge/merge.ts","../../src/js/utils/dom/removeAttribute/removeAttribute.ts","../../src/js/utils/dom/setAttribute/setAttribute.ts","../../src/js/utils/dom/create/create.ts","../../src/js/utils/dom/style/style.ts","../../src/js/utils/dom/display/display.ts","../../src/js/utils/dom/getAttribute/getAttribute.ts","../../src/js/utils/dom/hasClass/hasClass.ts","../../src/js/utils/dom/rect/rect.ts","../../src/js/utils/dom/remove/remove.ts","../../src/js/utils/dom/parseHtml/parseHtml.ts","../../src/js/utils/dom/prevent/prevent.ts","../../src/js/utils/dom/query/query.ts","../../src/js/utils/dom/queryAll/queryAll.ts","../../src/js/utils/dom/removeClass/removeClass.ts","../../src/js/utils/dom/unit/unit.ts","../../src/js/constants/project.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/utils/function/apply/apply.ts","../../src/js/utils/function/noop/noop.ts","../../src/js/utils/function/nextTick/nextTick.ts","../../src/js/utils/function/raf/raf.ts","../../src/js/utils/math/math/math.ts","../../src/js/utils/math/between/between.ts","../../src/js/utils/math/clamp/clamp.ts","../../src/js/utils/math/sign/sign.ts","../../src/js/utils/string/format/format.ts","../../src/js/utils/string/pad/pad.ts","../../src/js/utils/string/uniqueId/uniqueId.ts","../../src/js/constructors/EventBus/EventBus.ts","../../src/js/constants/events.ts","../../src/js/constructors/EventInterface/EventInterface.ts","../../src/js/constructors/RequestInterval/RequestInterval.ts","../../src/js/constructors/State/State.ts","../../src/js/constructors/Throttle/Throttle.ts","../../src/js/components/Direction/Direction.ts","../../src/js/constants/attributes.ts","../../src/js/constants/classes.ts","../../src/js/constants/types.ts","../../src/js/components/Slides/Slide.ts","../../src/js/components/Autoplay/constants.ts","../../src/js/constants/listener-options.ts","../../src/js/components/Drag/constants.ts","../../src/js/components/Keyboard/Keyboard.ts","../../src/js/components/LazyLoad/constants.ts","../../src/js/components/Sync/Sync.ts","../../src/js/components/Options/Options.ts","../../src/js/utils/arrayLike/find/find.ts","../../src/js/constants/directions.ts","../../src/js/components/Elements/Elements.ts","../../src/js/components/Slides/Slides.ts","../../src/js/components/Layout/Layout.ts","../../src/js/components/Clones/Clones.ts","../../src/js/utils/dom/measure/measure.ts","../../src/js/components/Move/Move.ts","../../src/js/components/Controller/Controller.ts","../../src/js/utils/math/approximatelyEqual/approximatelyEqual.ts","../../src/js/components/Arrows/Arrows.ts","../../src/js/components/Arrows/path.ts","../../src/js/components/Autoplay/Autoplay.ts","../../src/js/components/Cover/Cover.ts","../../src/js/components/Scroll/Scroll.ts","../../src/js/components/Scroll/constants.ts","../../src/js/components/Drag/Drag.ts","../../src/js/components/LazyLoad/LazyLoad.ts","../../src/js/components/Pagination/Pagination.ts","../../src/js/utils/dom/focus/focus.ts","../../src/js/components/Live/Live.ts","../../src/js/components/Wheel/Wheel.ts","../../src/js/constants/defaults.ts","../../src/js/constants/i18n.ts","../../src/js/transitions/Fade/Fade.ts","../../src/js/transitions/Slide/Slide.ts","../../src/js/core/Splide/Splide.ts"],"sourcesContent":["/**\n * Splide has been just created.\n */\nexport const CREATED = 1;\n\n/**\n * Splide has mounted components.\n */\nexport const MOUNTED = 2;\n\n/**\n * Splide is ready.\n */\nexport const IDLE = 3;\n\n/**\n * Splide is moving.\n */\nexport const MOVING = 4;\n\n/**\n * The user is dragging the slider.\n */\nexport const DRAGGING = 5;\n\n/**\n * Splide has been destroyed.\n */\nexport const DESTROYED = 6;\n\n/**\n * The collection of all states.\n *\n * @since 3.0.0\n */\nexport const STATES = {\n  CREATED,\n  MOUNTED,\n  IDLE,\n  MOVING,\n  DRAGGING,\n  DESTROYED,\n};\n","/**\n * The default priority for internal handlers.\n *\n * @since 3.0.0\n */\nexport const DEFAULT_EVENT_PRIORITY = 10;\n\n/**\n * The default priority for users' handlers.\n *\n * @since 3.0.0\n */\nexport const DEFAULT_USER_EVENT_PRIORITY = 20;\n","/**\n * Empties the array.\n *\n * @param array - A array to empty.\n */\nexport function empty( array: any[] ): void {\n  array.length = 0;\n}\n","/**\n * Checks if the given subject is an object or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an object, or otherwise `false`.\n */\nexport function isObject( subject: unknown ): subject is object {\n  return ! isNull( subject ) && typeof subject === 'object';\n}\n\n/**\n * Checks if the given subject is an array or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an array, or otherwise `false`.\n */\nexport function isArray<T>( subject: unknown ): subject is T[] {\n  return Array.isArray( subject );\n}\n\n/**\n * Checks if the given subject is a function or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a function, or otherwise `false`.\n */\nexport function isFunction( subject: unknown ): subject is ( ...args: any[] ) => any {\n  return typeof subject === 'function';\n}\n\n/**\n * Checks if the given subject is a string or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a string, or otherwise `false`.\n */\nexport function isString( subject: unknown ): subject is string {\n  return typeof subject === 'string';\n}\n\n/**\n * Checks if the given subject is `undefined` or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is `undefined`, or otherwise `false`.\n */\nexport function isUndefined( subject: unknown ): subject is undefined {\n  return typeof subject === 'undefined';\n}\n\n/**\n * Checks if the given subject is `null` or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is `null`, or otherwise `false`.\n */\nexport function isNull( subject: unknown ): subject is null {\n  return subject === null;\n}\n\n/**\n * Checks if the given subject is an HTMLElement or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\n */\nexport function isHTMLElement( subject: unknown ): subject is HTMLElement {\n  return subject instanceof HTMLElement;\n}\n\n/**\n * Checks if the given subject is an HTMLButtonElement or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an HTMLButtonElement, or otherwise `false`.\n */\nexport function isHTMLButtonElement( subject: unknown ): subject is HTMLButtonElement {\n  return subject instanceof HTMLButtonElement;\n}\n","import { isArray } from '../../type/type';\n\n\n/**\n * Push the provided value to an array if the value is not an array.\n *\n * @param value - A value to push.\n *\n * @return An array containing the value, or the value itself if it is already an array.\n */\nexport function toArray<T>( value: T | T[] ): T[] {\n  return isArray( value ) ? value : [ value ];\n}\n","import { toArray } from '../toArray/toArray';\n\n\n/**\n * The extended `Array#forEach` method that accepts a single value as an argument.\n *\n * @param values   - A value or values to iterate over.\n * @param iteratee - An iteratee function.\n */\nexport function forEach<T>( values: T | T[], iteratee: ( value: T, index: number, array: T[] ) => void ): void {\n  toArray( values ).forEach( iteratee );\n}\n","/**\n * Checks if the array includes the value or not.\n * `Array#includes` is not supported by IE.\n *\n * @param array - An array.\n * @param value - A value to search for.\n *\n * @return `true` if the array includes the value, or otherwise `false`.\n */\nexport function includes<T>( array: T[], value: T ): boolean {\n  return array.indexOf( value ) > -1;\n}\n","import { toArray } from '../toArray/toArray';\n\n\n/**\n * Extended `Array#push()` that accepts an item or an array with items.\n *\n * @param array - An array to push items.\n * @param items - An item or items to push.\n *\n * @return A provided array itself.\n */\nexport function push<T>( array: T[], items: T | T[] ): T[] {\n  array.push( ...toArray( items ) );\n  return array;\n}\n","export { empty }    from './empty/empty';\nexport { forEach }  from './forEach/forEach';\nexport { includes } from './includes/includes';\nexport { push }     from './push/push';\nexport { toArray }  from './toArray/toArray';\n\nexport const arrayProto = Array.prototype;\n","import { arrayProto } from '../../array';\n\n\n/**\n * The slice method for an array-like object.\n *\n * @param arrayLike - An array-like object.\n * @param start     - Optional. A start index.\n * @param end       - Optional. A end index.\n *\n * @return An array with sliced elements.\n */\nexport function slice<T>( arrayLike: ArrayLike<T>, start?: number, end?: number ): T[] {\n  return arrayProto.slice.call( arrayLike, start, end );\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Toggles the provided class or classes by following the `add` boolean.\n *\n * @param elm     - An element whose classes are toggled.\n * @param classes - A class or class names.\n * @param add     - Whether to add or remove a class.\n */\nexport function toggleClass( elm: Element, classes: string | string[], add: boolean ): void {\n  if ( elm ) {\n    forEach( classes, name => {\n      if ( name ) {\n        elm.classList[ add ? 'add' : 'remove' ]( name );\n      }\n    } );\n  }\n}\n","import { isString } from '../../type/type';\nimport { toggleClass } from '../toggleClass/toggleClass';\n\n\n/**\n * Adds classes to the element.\n *\n * @param elm     - An element to add classes to.\n * @param classes - Classes to add.\n */\nexport function addClass( elm: Element, classes: string | string[] ): void {\n  toggleClass( elm, isString( classes ) ? classes.split( ' ' ) : classes, true );\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Appends children to the parent element.\n *\n * @param parent   - A parent element.\n * @param children - A child or children to append to the parent.\n */\nexport function append( parent: Element, children: Node | Node[] ): void {\n  forEach( children, parent.appendChild.bind( parent ) );\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Inserts a node or nodes before the specified reference node.\n *\n * @param nodes - A node or nodes to insert.\n * @param ref   - A reference node.\n */\nexport function before( nodes: Node | Node[], ref: Node ): void {\n  forEach( nodes, node => {\n    const parent = ref.parentNode;\n\n    if ( parent ) {\n      parent.insertBefore( node, ref );\n    }\n  } );\n}\n","import { isHTMLElement } from '../../type/type';\n\n\n/**\n * Checks if the element can be selected by the provided selector or not.\n *\n * @param elm      - An element to check.\n * @param selector - A selector to test.\n *\n * @return `true` if the selector matches the element, or otherwise `false`.\n */\nexport function matches( elm: Element | EventTarget, selector: string ): boolean {\n  return isHTMLElement( elm ) && ( elm[ 'msMatchesSelector' ] || elm.matches ).call( elm, selector );\n}\n","import { slice } from '../../arrayLike';\nimport { matches } from '../matches/matches';\n\n\n/**\n * Finds children that has the specified tag or class name.\n *\n * @param parent   - A parent element.\n * @param selector - A selector to filter children.\n *\n * @return An array with filtered children.\n */\nexport function children<E extends HTMLElement>( parent: HTMLElement, selector: string ): E[] {\n  return parent ? slice( parent.children ).filter( child => matches( child, selector ) ) as E[] : [];\n}\n","import { children } from '../children/children';\n\n\n/**\n * Returns a child element that matches the specified tag or class name.\n *\n * @param parent   - A parent element.\n * @param selector - A selector to filter children.\n *\n * @return A matched child element if available, or otherwise `undefined`.\n */\nexport function child<E extends HTMLElement>( parent: HTMLElement, selector?: string ): E | undefined {\n  return selector ? children<E>( parent, selector )[ 0 ] : parent.firstElementChild as E;\n}\n","/**\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\n *\n * @param object   - An object to iterate over.\n * @param iteratee - An iteratee function that takes the value and key as arguments.\n * @param right    - If `true`, the method iterates over the object from the end like `forEachRight()`.\n *\n * @return A provided object itself.\n */\nexport function forOwn<T extends object>(\n  object: T,\n  iteratee: ( value: T[ keyof T ], key: string ) => boolean | void,\n  right?: boolean\n): T {\n  if ( object ) {\n    let keys = Object.keys( object );\n    keys = right ? keys.reverse() : keys;\n\n    for ( let i = 0; i < keys.length; i++ ) {\n      const key = keys[ i ];\n\n      if ( key !== '__proto__' ) {\n        if ( iteratee( object[ key ], key ) === false ) {\n          break;\n        }\n      }\n    }\n  }\n\n  return object;\n}\n","import { slice } from '../../arrayLike';\nimport { forOwn } from '../forOwn/forOwn';\n\n\n/**\n * Assign U to T.\n *\n * @typeParam T - An object to assign to.\n * @typeParam U - An object to assign.\n *\n * @return An assigned object type.\n */\nexport type Assign<T, U> = Omit<T, keyof U> & U;\n\nexport function assign<T extends object>( object: T ): T;\n\n// There is a way to type arguments recursively, but these fixed definitions are enough for this project.\nexport function assign<T extends object, U extends object>( object: T, source: U ): Assign<T, U>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object>(\n  object: T, source1: U1, source2: U2\n): Assign<Assign<T, U1>, U2>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object, U3 extends object>(\n  object: T, source1: U1, source2: U2, source3: U3\n): Assign<Assign<Assign<T, U1>, U2>, U3>;\n\n/**\n * Assigns all own enumerable properties of all source objects to the provided object.\n * `undefined` in source objects will be skipped.\n *\n * @param object - An object to assign properties to.\n *\n * @return An object assigned properties of the sources to.\n */\nexport function assign<T extends object>( object: T ): any {\n  // eslint-disable-next-line prefer-rest-params, prefer-spread\n  slice( arguments, 1 ).forEach( source => {\n    forOwn( source, ( value, key ) => {\n      object[ key ] = source[ key ];\n    } );\n  } );\n\n  return object;\n}\n","import { Cast } from '../../../types';\nimport { isArray, isObject } from '../../type/type';\nimport { forOwn } from '../forOwn/forOwn';\n\n\n/**\n * Merges U to T.\n *\n * @typeParam T - An object to merge U into.\n * @typeParam U - An object to merge properties from.\n *\n * @return A merged object type.\n */\nexport type Merge<T extends object, U extends object> = Omit<T, keyof U> & {\n  [ K in ( keyof T & keyof U ) ]: U[ K ] extends object\n    ? U[ K ] extends any[]\n      ? T[ K ] extends any[]\n        ? Array<T[ K ][ number ] | U[ K ][ number ]>\n        : U[ K ]\n      : T[ K ] extends object\n        ? Merge<T[ K ], U[ K ]> extends infer A ? Cast<A, object> : never\n        : U[ K ]\n    : U[ K ];\n} & Omit<U, keyof T>;\n\n/**\n * Recursively merges source properties to the object.\n * Be aware that this method does not merge arrays. They are just duplicated by `slice()`.\n *\n * @param object - An object to merge properties to.\n * @param source - A source object to merge properties from.\n *\n * @return A new object with merged properties.\n */\nexport function merge<T extends object, U extends object>( object: T, source: U ): Merge<T, U> {\n  forOwn( source, ( value, key ) => {\n    if ( isArray( value ) ) {\n      object[ key ] = value.slice();\n    } else if ( isObject( value ) ) {\n      object[ key ] = merge( isObject( object[ key ] ) ? object[ key ] : {}, value );\n    } else {\n      object[ key ] = value;\n    }\n  } );\n\n  return object as Merge<T, U>;\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Removes attributes from the element.\n *\n * @param elms  - An element or elements.\n * @param attrs - An attribute or attributes to remove.\n */\nexport function removeAttribute( elms: Element | Element[], attrs: string | string[] ): void {\n  forEach( elms, elm => {\n    forEach( attrs, attr => {\n      elm && elm.removeAttribute( attr );\n    } );\n  } );\n}\n","import { forEach } from '../../array';\nimport { forOwn } from '../../object';\nimport { isNull, isObject } from '../../type/type';\nimport { removeAttribute } from '../removeAttribute/removeAttribute';\n\n\nexport function setAttribute( elms: Element | Element[], attr: string, value: string | number | boolean ): void;\nexport function setAttribute( elms: Element | Element[], attrs: Record<string, string | number | boolean> ): void;\n\nexport function setAttribute(\n  elms: Element | Element[],\n  attrs: string | Record<string, string | number | boolean>,\n  value?: string | number | boolean\n): void {\n  if ( isObject( attrs ) ) {\n    forOwn( attrs, ( value, name ) => {\n      setAttribute( elms, name, value );\n    } );\n  } else {\n    forEach( elms, elm => {\n      isNull( value ) ? removeAttribute( elm, attrs ) : elm.setAttribute( attrs, String( value ) );\n    } );\n  }\n}\n","import { isString } from '../../type/type';\nimport { addClass } from '../addClass/addClass';\nimport { append } from '../append/append';\nimport { setAttribute } from '../setAttribute/setAttribute';\n\n\nexport function create<K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  attrs?: Record<string, string | number | boolean> | string | string[],\n  parent?: HTMLElement\n): HTMLElementTagNameMap[ K ];\n\nexport function create(\n  tag: string,\n  attrs?: Record<string, string | number | boolean> | string | string[],\n  parent?: HTMLElement\n): HTMLElement;\n\n/**\n * Creates a HTML element.\n *\n * @param tag    - A tag name.\n * @param attrs  - Optional. An object with attributes to apply the created element to, or a string with classes.\n * @param parent - Optional. A parent element where the created element is appended.\n */\nexport function create<K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  attrs?: Record<string, string | number | boolean> | string,\n  parent?: HTMLElement\n): HTMLElementTagNameMap[ K ] {\n  const elm = document.createElement( tag );\n\n  if ( attrs ) {\n    isString( attrs ) ? addClass( elm, attrs ) : setAttribute( elm, attrs );\n  }\n\n  parent && append( parent, elm );\n\n  return elm;\n}\n","import { isNull, isUndefined } from '../../type/type';\n\n\nexport function style<K extends keyof CSSStyleDeclaration>(\n  elm: HTMLElement,\n  prop: K,\n): CSSStyleDeclaration[ K ];\n\nexport function style(\n  elm: HTMLElement,\n  prop: string,\n): string;\n\nexport function style(\n  elm: HTMLElement,\n  prop: string,\n  value: string | number\n): void;\n\n\n/**\n * Applies inline styles to the provided element by an object literal.\n *\n * @param elm   - An element to apply styles to.\n * @param prop  - An object literal with styles or a property name.\n * @param value - A value to set.\n */\nexport function style(\n  elm: HTMLElement,\n  prop: string,\n  value?: string | number\n): string | void {\n  if ( isUndefined( value ) ) {\n    return getComputedStyle( elm )[ prop ];\n  }\n\n  if ( ! isNull( value ) ) {\n    const { style } = elm;\n    value = `${ value }`;\n\n    if ( style[ prop ] !== value ) {\n      style[ prop ] = value;\n    }\n  }\n}\n","import { style } from '../style/style';\n\n\n/**\n * Sets the `display` CSS value to the element.\n *\n * @param elm     - An element to set a new value to.\n * @param display - A new `display` value.\n */\nexport function display( elm: HTMLElement, display: string ): void {\n  style( elm, 'display', display );\n}\n","/**\n * Returns the specified attribute value.\n *\n * @param elm  - An element.\n * @param attr - An attribute to get.\n */\nexport function getAttribute( elm: Element, attr: string ): string {\n  return elm.getAttribute( attr );\n}\n","/**\n * Checks if the element contains the specified class or not.\n *\n * @param elm       - An element to check.\n * @param className - A class name that may be contained by the element.\n *\n * @return `true` if the element contains the class, or otherwise `false`.\n */\nexport function hasClass( elm: Element, className: string ): boolean {\n  return elm && elm.classList.contains( className );\n}\n","/**\n * Returns a DOMRect object of the provided element.\n *\n * @param target - An element.\n */\nexport function rect( target: Element ): DOMRect {\n  return target.getBoundingClientRect();\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Removes the provided node from its parent.\n *\n * @param nodes - A node or nodes to remove.\n */\nexport function remove( nodes: Node | Node[] ): void {\n  forEach( nodes, node => {\n    if ( node && node.parentNode ) {\n      node.parentNode.removeChild( node );\n    }\n  } );\n}\n","import { child } from '../child/child';\n\n\n/**\n * Parses the provided HTML string and returns the first element.\n *\n * @param html - An HTML string to parse.\n *\n * @return An Element on success, or otherwise `undefined`.\n */\nexport function parseHtml<E extends HTMLElement>( html: string ): E | undefined {\n  return child<E>( new DOMParser().parseFromString( html, 'text/html' ).body );\n}\n","/**\n * Call the `preventDefault()` of the provided event.\n *\n * @param e               - An Event object.\n * @param stopPropagation - Optional. Whether to stop the event propagation or not.\n */\nexport function prevent( e: Event, stopPropagation?: boolean ): void {\n  e.preventDefault();\n\n  if ( stopPropagation ) {\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n  }\n}\n","/**\n * Returns an element that matches the provided selector.\n *\n * @param parent   - A parent element to start searching from.\n * @param selector - A selector to query.\n *\n * @return A found element or `null`.\n */\nexport function query<E extends Element = Element>( parent: Element | Document, selector: string ): E | null {\n  return parent && parent.querySelector( selector );\n}\n","import { slice } from '../../arrayLike';\n\n\n/**\n * Returns elements that match the provided selector.\n *\n * @param parent   - A parent element to start searching from.\n * @param selector - A selector to query.\n *\n * @return An array with matched elements.\n */\nexport function queryAll<E extends Element = Element>( parent: Element | Document, selector: string ): E[] {\n  return slice<E>( parent.querySelectorAll( selector ) );\n}\n","import { toggleClass } from '../toggleClass/toggleClass';\n\n\n/**\n * Removes classes from the element.\n *\n * @param elm     - An element to remove classes from.\n * @param classes - Classes to remove.\n */\nexport function removeClass( elm: Element, classes: string | string[] ): void {\n  toggleClass( elm, classes, false );\n}\n","import { isString } from '../../type/type';\n\n\n/**\n * Appends `px` to the provided number.\n * If the value is already string, just returns it.\n *\n * @param value - A value to append `px` to.\n *\n * @return A string with the CSS unit.\n */\nexport function unit( value: number | string ): string {\n  return isString( value ) ? value : value ? `${ value }px` : '';\n}\n","/**\n * The project code.\n *\n * @since 3.0.0\n */\nexport const PROJECT_CODE = 'lbxsplide';\n\n/**\n * The data attribute prefix.\n *\n * @since 3.0.0\n */\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\n","import { PROJECT_CODE } from '../../../constants/project';\n\n\n/**\n * Throws an error if the provided condition is falsy.\n *\n * @param condition - If falsy, an error is thrown.\n * @param message   - Optional. A message to display.\n */\nexport function assert( condition: any, message?: string ): void {\n  if ( ! condition ) {\n    throw new Error( `[${ PROJECT_CODE }] ${ message || '' }` );\n  }\n}\n","import { AnyFunction, ShiftN } from '../../../types';\nimport { slice } from '../../arrayLike';\n\n\n/**\n * Create a function where provided arguments are bound.\n * `this` parameter will be always null.\n *\n * @param func - A function.\n * @param args - Arguments to bind to the function.\n *\n * @return A function where arguments are bound.\n */\nexport function apply<F extends AnyFunction, A extends any[]>(\n  func: F,\n  ...args: A\n): ( ...args: ShiftN<Parameters<F>, A[\"length\"]> ) => ReturnType<F>;\n\n/**\n * Create a function where provided arguments are bound.\n * `this` parameter will be always null.\n *\n * @param func - A function.\n */\nexport function apply( func: AnyFunction ): any {\n  // eslint-disable-next-line prefer-rest-params, prefer-spread\n  return func.bind( null, ...slice( arguments, 1 ) );\n}\n","/**\n * No operation.\n */\nexport const noop = (): void => {}; // eslint-disable-line no-empty-function, @typescript-eslint/no-empty-function\n","import { AnyFunction } from '../../../types';\n\n\n/**\n * Invokes the callback on the next tick.\n *\n * @param callback - A callback function.\n */\nexport const nextTick: ( callback: AnyFunction ) => ReturnType<typeof setTimeout> = setTimeout;\n","/**\n * The arias of `window.requestAnimationFrame()`.\n */\nexport function raf( func: FrameRequestCallback ): number {\n  return requestAnimationFrame( func );\n}\n","export const { min, max, floor, ceil, abs } = Math;\n","import { max, min } from '../math/math';\n\n\n/**\n * Checks if the subject number is between `minOrMax` and `maxOrMin`.\n *\n * @param number    - A subject number to check.\n * @param minOrMax  - A min or max number.\n * @param maxOrMin  - A max or min number.\n * @param exclusive - Optional. Whether to exclude `x` or `y`.\n */\nexport function between( number: number, minOrMax: number, maxOrMin: number, exclusive?: boolean ): boolean {\n  const minimum = min( minOrMax, maxOrMin );\n  const maximum = max( minOrMax, maxOrMin );\n  return exclusive ? minimum < number && number < maximum : minimum <= number && number <= maximum;\n}\n","import { max, min } from '../math/math';\n\n\n/**\n * Clamps a number.\n *\n * @param number - A subject number to check.\n * @param x      - A min or max number.\n * @param y      - A min or max number.\n */\nexport function clamp( number: number, x: number, y: number ): number {\n  const minimum = min( x, y );\n  const maximum = max( x, y );\n  return min( max( minimum, number ), maximum );\n}\n","/**\n * Returns the sign of the provided number.\n *\n * @param x - A number.\n *\n * @return `1` for positive numbers, `-1` for negative numbers, or `0` for `0`.\n */\nexport function sign( x: number ): number {\n  return +( x > 0 ) - +( x < 0 );\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Formats a string.\n *\n * @param string       - A string to format.\n * @param replacements - A replacement or replacements.\n *\n * @return A formatted string.\n */\nexport function format( string: string, replacements: string | number | Array<string | number> ): string {\n  forEach( replacements, replacement => {\n    string = string.replace( '%s', `${ replacement }` );\n  } );\n\n  return string;\n}\n","/**\n * Pads the number with 0.\n *\n * @param number - A number to pad.\n *\n * @return string - Padded number.\n */\nexport function pad( number: number ): string {\n  return number < 10 ? `0${ number }` : `${ number }`;\n}\n","import { pad } from '../pad/pad';\n\n\n/**\n * Stores unique IDs.\n *\n * @since 3.0.0\n */\nconst ids: Record<string, number> = {};\n\n/**\n * Returns a sequential unique ID as \"{ prefix }-{ number }\".\n *\n * @param prefix - A prefix for the ID.\n */\nexport function uniqueId( prefix: string ): string {\n  return `${ prefix }${ pad( ( ids[ prefix ] = ( ids[ prefix ] || 0 ) + 1 ) ) }`;\n}\n","import { DEFAULT_EVENT_PRIORITY } from '../../constants/priority';\nimport { AnyFunction } from '../../types';\nimport { forOwn, push, slice, toArray } from '../../utils';\n\n\n/**\n * The interface for the EventBus instance.\n *\n * @since 3.0.0\n */\nexport interface EventBusObject {\n  on( events: string | string[], callback: EventBusCallback, key?: object, priority?: number ): void;\n  off( events: string | string[], key?: object ): void;\n  offBy( key: object ): void;\n  emit( event: string, ...args: any[] ): void;\n  destroy(): void;\n}\n\n/**\n * The interface for each event handler object.\n *\n * @since 3.0.0\n */\nexport interface EventHandler {\n  _event: string;\n  _callback: AnyFunction;\n  _namespace: string;\n  _priority: number;\n  _key?: object;\n}\n\n/**\n * The type for a callback function of the EventBus.\n *\n * @since 3.0.0\n */\nexport type EventBusCallback = AnyFunction;\n\n/**\n * The constructor to provided a simple event system.\n *\n * @since 3.0.0\n *\n * @return An EventBus object.\n */\nexport function EventBus(): EventBusObject {\n  /**\n   * The collection of registered handlers.\n   */\n  let handlers: Record<string, EventHandler[]> = {};\n\n  /**\n   * Registers an event handler.\n   *\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param callback - A callback function to register.\n   * @param key      - Optional. An object for an identifier of the handler.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   *                   Lower numbers correspond with earlier execution. The default value is 10.\n   */\n  function on(\n    events: string | string[],\n    callback: EventBusCallback,\n    key?: object,\n    priority = DEFAULT_EVENT_PRIORITY\n  ): void {\n    forEachEvent( events, ( event, namespace ) => {\n      handlers[ event ] = handlers[ event ] || [];\n\n      push( handlers[ event ], {\n        _event    : event,\n        _callback : callback,\n        _namespace: namespace,\n        _priority : priority,\n        _key      : key,\n      } ).sort( ( handler1, handler2 ) => handler1._priority - handler2._priority );\n    } );\n  }\n\n  /**\n   * Removes event handlers registered by `on()`.\n   * If only the event name is provided, all handlers that associate with the event are removed.\n   * If the event name and namespace are specified, handlers that associate with the event and namespace are removed.\n   *\n   * @param events - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param key    - Optional. An object for an identifier of the handler.\n   */\n  function off( events: string | string[], key?: object ): void {\n    forEachEvent( events, ( event, namespace ) => {\n      const eventHandlers = handlers[ event ];\n\n      handlers[ event ] = eventHandlers && eventHandlers.filter( handler => {\n        return handler._key ? handler._key !== key : key || handler._namespace !== namespace;\n      } );\n    } );\n  }\n\n  /**\n   * Removes all handlers locked by the specified key.\n   *\n   * @param key - A key.\n   */\n  function offBy( key: object ): void {\n    forOwn( handlers, ( eventHandlers, event ) => {\n      off( event, key );\n    } );\n  }\n\n  /**\n   * Triggers callback functions.\n   * This accepts additional arguments and passes them to callbacks.\n   *\n   * @param event - An event name.\n   */\n  function emit( event: string ): void {\n    ( handlers[ event ] || [] ).forEach( handler => {\n      // eslint-disable-next-line prefer-rest-params, prefer-spread\n      handler._callback.apply( handler, slice( arguments, 1 ) );\n    } );\n  }\n\n  /**\n   * Removes all handlers.\n   */\n  function destroy(): void {\n    handlers = {};\n  }\n\n  /**\n   * Parses provided events and iterates over them.\n   *\n   * @param events   - An event or events.\n   * @param iteratee - An iteratee function.\n   */\n  function forEachEvent( events: string | string[], iteratee: ( event: string, namespace: string ) => void ): void {\n    toArray( events ).join( ' ' ).split( ' ' ).forEach( eventNS => {\n      const fragments = eventNS.split( '.' );\n      iteratee( fragments[ 0 ], fragments[ 1 ] );\n    } );\n  }\n\n  return {\n    on,\n    off,\n    offBy,\n    emit,\n    destroy,\n  };\n}\n","export const EVENT_MOUNTED            = 'mounted';\nexport const EVENT_READY              = 'ready';\nexport const EVENT_MOVE               = 'move';\nexport const EVENT_MOVED              = 'moved';\nexport const EVENT_SHIFTED            = 'shifted';\nexport const EVENT_CLICK              = 'click';\nexport const EVENT_ACTIVE             = 'active';\nexport const EVENT_INACTIVE           = 'inactive';\nexport const EVENT_VISIBLE            = 'visible';\nexport const EVENT_HIDDEN             = 'hidden';\nexport const EVENT_SLIDE_KEYDOWN      = 'slide:keydown';\nexport const EVENT_REFRESH            = 'refresh';\nexport const EVENT_UPDATED            = 'updated';\nexport const EVENT_RESIZE             = 'resize';\nexport const EVENT_RESIZED            = 'resized';\nexport const EVENT_REPOSITIONED       = 'repositioned';\nexport const EVENT_DRAG               = 'drag';\nexport const EVENT_DRAGGING           = 'dragging';\nexport const EVENT_DRAGGED            = 'dragged';\nexport const EVENT_SCROLL             = 'scroll';\nexport const EVENT_SCROLLED           = 'scrolled';\nexport const EVENT_DESTROY            = 'destroy';\nexport const EVENT_ARROWS_MOUNTED     = 'arrows:mounted';\nexport const EVENT_ARROWS_UPDATED     = 'arrows:updated';\nexport const EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\nexport const EVENT_PAGINATION_UPDATED = 'pagination:updated';\nexport const EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\nexport const EVENT_AUTOPLAY_PLAY      = 'autoplay:play';\nexport const EVENT_AUTOPLAY_PLAYING   = 'autoplay:playing';\nexport const EVENT_AUTOPLAY_PAUSE     = 'autoplay:pause';\nexport const EVENT_LAZYLOAD_LOADED    = 'lazyload:loaded';\n\n","import { EVENT_DESTROY } from '../../constants/events';\nimport { Splide } from '../../core/Splide/Splide';\nimport { AnyFunction, EventMap } from '../../types';\nimport { apply, forEach } from '../../utils';\nimport { EventBusCallback } from '../EventBus/EventBus';\n\n\n/**\n * The interface for the EventInterface object.\n *\n * @since 3.0.0\n */\nexport interface EventInterfaceObject {\n  on<K extends keyof EventMap>( event: K, callback: EventMap[ K ], priority?: number ): void;\n  on( events: string | string[], callback: EventBusCallback, priority?: number ): void;\n  off<K extends keyof EventMap>( events: K | K[] | string | string[] ): void;\n  emit<K extends keyof EventMap>( event: K, ...args: Parameters<EventMap[ K ]> ): void\n  emit( event: string, ...args: any[] ): void;\n  bind(\n    target: Element | Window | Document | Array<Element | Window | Document>,\n    events: string,\n    callback: AnyFunction,\n    options?: AddEventListenerOptions\n  ): void\n  unbind(\n    target: Element | Window | Document | Array<Element | Window | Document>,\n    events: string,\n    callback?: AnyFunction,\n  ): void;\n  destroy(): void;\n}\n\n/**\n * The type for event targets.\n *\n * @since 3.0.0\n */\ntype EventTarget = Element | Window | Document;\n\n/**\n * The function that provides interface for internal and native events.\n *\n * @since 3.0.0\n *\n * @param Splide - A Splide instance.\n *\n * @return A collection of interface functions.\n */\nexport function EventInterface( Splide: Splide ): EventInterfaceObject {\n  /**\n   * Holds the event object.\n   */\n  const { event } = Splide;\n\n  /**\n   * The key for events.\n   */\n  const key = {};\n\n  /**\n   * Stores all handlers that listen to native events.\n   */\n  let listeners: [ EventTarget, string, AnyFunction, AddEventListenerOptions? ][] = [];\n\n  /**\n   * Registers an event handler with an unique key.\n   * It can only be removed by `off()` method below.\n   *\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param callback - A callback function to register.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   *                   Lower numbers correspond with earlier execution. The default value is 10.\n   */\n  function on( events: string | string[], callback: EventBusCallback, priority?: number ): void {\n    event.on( events, callback, key, priority );\n  }\n\n  /**\n   * Removes event handlers registered by `on()`.\n   *\n   * @param events - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   */\n  function off( events: string | string[] ): void {\n    event.off( events, key );\n  }\n\n  /**\n   * Listens to native events.\n   * Splide#destory() will remove all registered listeners.\n   *\n   * @param targets  - A target element, the window object or the document object.\n   * @param events   - An event or events to listen to.\n   * @param callback - A callback function.\n   * @param options  - Optional. The options to pass to the `addEventListener` function.\n   */\n  function bind(\n    targets: EventTarget | EventTarget[],\n    events: string,\n    callback: AnyFunction,\n    options?: AddEventListenerOptions\n  ): void {\n    forEachEvent( targets, events, ( target, event ) => {\n      listeners.push( [ target, event, callback, options ] );\n      target.addEventListener( event, callback, options );\n    } );\n  }\n\n  /**\n   * Removes the event handler.\n   *\n   * @param targets  - A target element, the window object or the document object.\n   * @param events   - An event name or names to remove.\n   * @param callback - Optional. Specify the callback to remove.\n   */\n  function unbind( targets: EventTarget | EventTarget[], events: string, callback?: AnyFunction ): void {\n    forEachEvent( targets, events, ( target, event ) => {\n      listeners = listeners.filter( listener => {\n        if ( listener[ 0 ] === target && listener[ 1 ] === event && ( ! callback || listener[ 2 ] === callback ) ) {\n          target.removeEventListener( event, listener[ 2 ], listener[ 3 ] );\n          return false;\n        }\n\n        return true;\n      } );\n    } );\n  }\n\n  /**\n   * Iterates over each target and event.\n   *\n   * @param targets  - A target element, the window object or the document object.\n   * @param events   - An event name or names.\n   * @param iteratee - An iteratee function.\n   */\n  function forEachEvent(\n    targets: EventTarget | EventTarget[],\n    events: string,\n    iteratee: ( target: EventTarget, event: string ) => void\n  ): void {\n    forEach( targets, target => {\n      if ( target ) {\n        events.split( ' ' ).forEach( apply( iteratee, target ) );\n      }\n    } );\n  }\n\n  /**\n   * Removes all listeners.\n   */\n  function destroy(): void {\n    listeners = listeners.filter( data => unbind( data[ 0 ], data[ 1 ] ) );\n    event.offBy( key );\n  }\n\n  /**\n   * Invokes destroy when the slider is destroyed.\n   */\n  event.on( EVENT_DESTROY, destroy, key );\n\n  return {\n    on,\n    off,\n    emit: event.emit,\n    bind,\n    unbind,\n    destroy,\n  };\n}\n","import { raf } from '../../utils';\n\n\n/**\n * The interface for the returning value of the RequestInterval.\n *\n * @since 3.0.0\n */\nexport interface RequestIntervalInterface {\n  start( resume?: boolean ): void;\n  pause(): void;\n  rewind(): void;\n  cancel(): void;\n  set( interval: number ): void;\n  isPaused(): boolean;\n}\n\n/**\n * Requests interval like the native `setInterval()` with using `requestAnimationFrame`.\n *\n * @since 3.0.0\n *\n * @param interval   - The interval duration in milliseconds.\n * @param onInterval - The callback fired on every interval.\n * @param onUpdate   - Optional. Called on every animation frame, taking the progress rate.\n * @param limit      - Optional. Limits the number of interval.\n */\nexport function RequestInterval(\n  interval: number,\n  onInterval: () => void,\n  onUpdate?: ( rate: number ) => void,\n  limit?: number\n): RequestIntervalInterface {\n  const { now } = Date;\n\n  /**\n   * The time when the interval starts.\n   */\n  let startTime: number;\n\n  /**\n   * The current progress rate.\n   */\n  let rate = 0;\n\n  /**\n   * The animation frame ID.\n   */\n  let id: number;\n\n  /**\n   * Indicates whether the interval is currently paused or not.\n   */\n  let paused = true;\n\n  /**\n   * The loop count. This only works when the `limit` argument is provided.\n   */\n  let count = 0;\n\n  /**\n   * The update function called on every animation frame.\n   */\n  function update(): void {\n    if ( ! paused ) {\n      const elapsed = now() - startTime;\n\n      if ( elapsed >= interval ) {\n        rate      = 1;\n        startTime = now();\n      } else {\n        rate = elapsed / interval;\n      }\n\n      if ( onUpdate ) {\n        onUpdate( rate );\n      }\n\n      if ( rate === 1 ) {\n        onInterval();\n\n        if ( limit && ++count >= limit ) {\n          return pause();\n        }\n      }\n\n      raf( update );\n    }\n  }\n\n  /**\n   * Starts the interval.\n   *\n   * @param resume - Optional. Whether to resume the paused progress or not.\n   */\n  function start( resume?: boolean ): void {\n    ! resume && cancel();\n    startTime = now() - ( resume ? rate * interval : 0 );\n    paused    = false;\n    raf( update );\n  }\n\n  /**\n   * Pauses the interval.\n   */\n  function pause(): void {\n    paused = true;\n  }\n\n  /**\n   * Rewinds the current progress.\n   */\n  function rewind(): void {\n    startTime = now();\n    rate      = 0;\n\n    if ( onUpdate ) {\n      onUpdate( rate );\n    }\n  }\n\n  /**\n   * Cancels the interval.\n   */\n  function cancel() {\n    cancelAnimationFrame( id );\n    rate   = 0;\n    id     = 0;\n    paused = true;\n  }\n\n  /**\n   * Sets new interval duration.\n   *\n   * @param time - The interval duration in milliseconds.\n   */\n  function set( time: number ): void {\n    interval = time;\n  }\n\n  /**\n   * Checks if the interval is paused or not.\n   *\n   * @return `true` if the interval is paused, or otherwise `false`.\n   */\n  function isPaused(): boolean {\n    return paused;\n  }\n\n  return {\n    start,\n    rewind,\n    pause,\n    cancel,\n    set,\n    isPaused,\n  };\n}\n","import { includes, toArray } from '../../utils';\n\n\n/**\n * The interface for the State object.\n *\n * @since 3.0.0\n */\nexport interface StateObject {\n  set( state: number ): void;\n  is( states: number | number[] ): boolean;\n}\n\n/**\n * The function providing a super simple state system.\n *\n * @param initialState - Specifies the initial state.\n */\nexport function State( initialState: number ): StateObject {\n  /**\n   * The current state.\n   */\n  let state = initialState;\n\n  /**\n   * Sets a new state.\n   *\n   * @param value - A new state value.\n   */\n  function set( value: number ): void {\n    state = value;\n  }\n\n  /**\n   * Checks if the current state matches the provided one.\n   *\n   * @param states - A state to check.\n   *\n   * @return `true` if the current state is the provided one.\n   */\n  function is( states: number | number[] ): boolean {\n    return includes( toArray( states ), state );\n  }\n\n  return { set, is };\n}\n","import { AnyFunction } from '../../types';\nimport { RequestInterval, RequestIntervalInterface } from '../RequestInterval/RequestInterval';\n\n\n/**\n * The interface for the returning value of the RequestInterval.\n *\n * @since 3.0.0\n */\nexport interface ThrottleInstance<F extends AnyFunction> extends Function {\n  ( ...args: Parameters<F> ): void;\n}\n\n/**\n * Returns the throttled function.\n *\n * @param func     - A function to throttle.\n * @param duration - Optional. Throttle duration in milliseconds.\n *\n * @return A throttled function.\n */\nexport function Throttle<F extends AnyFunction>(\n  func: F,\n  duration?: number\n): ThrottleInstance<F> {\n  let interval: RequestIntervalInterface;\n\n  function throttled( this: ThisParameterType<F> ): void {\n    if ( ! interval ) {\n      interval = RequestInterval( duration || 0, () => {\n        // eslint-disable-next-line prefer-rest-params\n        func.apply( this, arguments );\n        interval = null;\n      }, null, 1 );\n\n      interval.start();\n    }\n  }\n\n  return throttled;\n}\n","import { RTL, TTB } from '../../constants/directions';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\n\n\n/**\n * The interface for the Direction component.\n *\n * @since 3.0.0\n */\nexport interface DirectionComponent extends BaseComponent {\n  resolve( prop: string, axisOnly?: boolean ): string;\n  orient( value: number ): number;\n}\n\n/**\n * The translation map for directions.\n *\n * @since 3.0.0\n */\nexport const ORIENTATION_MAP = {\n  marginRight : [ 'marginBottom', 'marginLeft' ],\n  autoWidth   : [ 'autoHeight' ],\n  fixedWidth  : [ 'fixedHeight' ],\n  paddingLeft : [ 'paddingTop', 'paddingRight' ],\n  paddingRight: [ 'paddingBottom', 'paddingLeft' ],\n  width       : [ 'height' ],\n  left        : [ 'top', 'right' ],\n  right       : [ 'bottom', 'left' ],\n  x           : [ 'y' ],\n  X           : [ 'Y' ],\n  Y           : [ 'X' ],\n  ArrowLeft   : [ 'ArrowUp', 'ArrowRight' ],\n  ArrowRight  : [ 'ArrowDown', 'ArrowLeft' ],\n};\n\n/**\n * The component that absorbs the difference among directions.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Direction component object.\n */\nexport function Direction( Splide: Splide, Components: Components, options: Options ): DirectionComponent {\n  /**\n   * Resolves the provided property name.\n   *\n   * @param prop     - A property name to translate.\n   * @param axisOnly - Optional. If `ture`, returns the same property for LTR and RTL.\n   */\n  function resolve( prop: string, axisOnly?: boolean ): string {\n    const { direction } = options;\n    const index = direction === RTL && ! axisOnly ? 1 : direction === TTB ? 0 : -1;\n    return ORIENTATION_MAP[ prop ][ index ] || prop;\n  }\n\n  /**\n   * Orients the value towards the current direction.\n   *\n   * @param value - A value to orient.\n   *\n   * @return The oriented value.\n   */\n  function orient( value: number ): number {\n    return value * ( options.direction === RTL ? 1 : -1 );\n  }\n\n  return {\n    resolve,\n    orient,\n  };\n}\n","export const ROLE      = 'role';\nexport const TAB_INDEX = 'tabindex';\nexport const DISABLED  = 'disabled';\n\nexport const ARIA_PREFIX          = 'aria-';\nexport const ARIA_CONTROLS        = `${ ARIA_PREFIX }controls`;\nexport const ARIA_CURRENT         = `${ ARIA_PREFIX }current`;\nexport const ARIA_LABEL           = `${ ARIA_PREFIX }label`;\nexport const ARIA_HIDDEN          = `${ ARIA_PREFIX }hidden`;\nexport const ARIA_ORIENTATION     = `${ ARIA_PREFIX }orientation`;\nexport const ARIA_ROLEDESCRIPTION = `${ ARIA_PREFIX }roledescription`;\nexport const ARIA_ATOMIC          = `${ ARIA_PREFIX }atomic`;\nexport const ARIA_LIVE            = `${ ARIA_PREFIX }live`;\n\n/**\n * The array with all attributes.\n *\n * @since 3.0.0\n */\nexport const ALL_ATTRIBUTES = [\n  ROLE,\n  TAB_INDEX,\n  DISABLED,\n  ARIA_CONTROLS,\n  ARIA_CURRENT,\n  ARIA_LABEL,\n  ARIA_HIDDEN,\n  ARIA_ORIENTATION,\n  ARIA_ROLEDESCRIPTION,\n  ARIA_ATOMIC,\n  ARIA_LIVE,\n];\n","import { PROJECT_CODE } from './project';\n\n\nexport const CLASS_ROOT            = PROJECT_CODE;\nexport const CLASS_SLIDER          = `${ PROJECT_CODE }__slider`;\nexport const CLASS_TRACK           = `${ PROJECT_CODE }__track`;\nexport const CLASS_LIST            = `${ PROJECT_CODE }__list`;\nexport const CLASS_SLIDE           = `${ PROJECT_CODE }__slide`;\nexport const CLASS_CLONE           = `${ CLASS_SLIDE }--clone`;\nexport const CLASS_CONTAINER       = `${ CLASS_SLIDE }__container`;\nexport const CLASS_ARROWS          = `${ PROJECT_CODE }__arrows`;\nexport const CLASS_ARROW           = `${ PROJECT_CODE }__arrow`;\nexport const CLASS_ARROW_PREV      = `${ CLASS_ARROW }--prev`;\nexport const CLASS_ARROW_NEXT      = `${ CLASS_ARROW }--next`;\nexport const CLASS_PAGINATION      = `${ PROJECT_CODE }__pagination`;\nexport const CLASS_PAGINATION_PAGE = `${ CLASS_PAGINATION }__page`;\nexport const CLASS_PROGRESS        = `${ PROJECT_CODE }__progress`;\nexport const CLASS_PROGRESS_BAR    = `${ CLASS_PROGRESS }__bar`;\nexport const CLASS_AUTOPLAY        = `${ PROJECT_CODE }__autoplay`;\nexport const CLASS_PLAY            = `${ PROJECT_CODE }__play`;\nexport const CLASS_PAUSE           = `${ PROJECT_CODE }__pause`;\nexport const CLASS_SPINNER         = `${ PROJECT_CODE }__spinner`;\nexport const CLASS_SR              = `${ PROJECT_CODE }__sr`;\nexport const CLASS_INITIALIZED     = 'is-initialized';\nexport const CLASS_ACTIVE          = 'is-active';\nexport const CLASS_PREV            = 'is-prev';\nexport const CLASS_NEXT            = 'is-next';\nexport const CLASS_VISIBLE         = 'is-visible';\nexport const CLASS_LOADING         = 'is-loading';\n\n/**\n * The array with all status classes.\n *\n * @since 3.0.0\n */\nexport const STATUS_CLASSES = [ CLASS_ACTIVE, CLASS_VISIBLE, CLASS_PREV, CLASS_NEXT, CLASS_LOADING ];\n\n/**\n * The collection of classes for elements that Splide dynamically creates.\n *\n * @since 3.0.0\n */\nexport const CLASSES = {\n  slide     : CLASS_SLIDE,\n  clone     : CLASS_CLONE,\n  arrows    : CLASS_ARROWS,\n  arrow     : CLASS_ARROW,\n  prev      : CLASS_ARROW_PREV,\n  next      : CLASS_ARROW_NEXT,\n  pagination: CLASS_PAGINATION,\n  page      : CLASS_PAGINATION_PAGE,\n  spinner   : CLASS_SPINNER,\n};\n","/**\n * The type for the regular slider.\n *\n * @since 3.0.0\n */\nexport const SLIDE = 'slide';\n\n/**\n * The type for the carousel slider.\n *\n * @since 3.0.0\n */\nexport const LOOP = 'loop';\n\n/**\n * The type for the fade slider that can not have multiple slides in a page.\n *\n * @since 3.0.0\n */\nexport const FADE = 'fade';\n","import {\n  ALL_ATTRIBUTES,\n  ARIA_CONTROLS,\n  ARIA_CURRENT,\n  ARIA_HIDDEN,\n  ARIA_LABEL, ARIA_ROLEDESCRIPTION,\n  ROLE,\n  TAB_INDEX,\n} from '../../constants/attributes';\nimport {\n  CLASS_ACTIVE,\n  CLASS_CONTAINER,\n  CLASS_NEXT,\n  CLASS_PREV,\n  CLASS_VISIBLE,\n  STATUS_CLASSES,\n} from '../../constants/classes';\nimport {\n  EVENT_ACTIVE,\n  EVENT_CLICK,\n  EVENT_HIDDEN,\n  EVENT_INACTIVE,\n  EVENT_MOVE,\n  EVENT_MOVED,\n  EVENT_NAVIGATION_MOUNTED,\n  EVENT_REFRESH,\n  EVENT_REPOSITIONED,\n  EVENT_SCROLLED,\n  EVENT_SHIFTED,\n  EVENT_SLIDE_KEYDOWN,\n  EVENT_VISIBLE,\n} from '../../constants/events';\nimport { FADE, LOOP } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent } from '../../types';\nimport {\n  abs,\n  ceil,\n  child,\n  floor,\n  format,\n  getAttribute,\n  hasClass,\n  min,\n  pad,\n  queryAll,\n  rect,\n  removeAttribute,\n  removeClass,\n  setAttribute,\n  style as _style,\n  toggleClass,\n} from '../../utils';\n\n\n/**\n * The interface for the Slide sub component.\n *\n * @since 3.0.0\n */\nexport interface  SlideComponent extends BaseComponent {\n  index: number;\n  slideIndex: number;\n  slide: HTMLElement;\n  container: HTMLElement;\n  isClone: boolean;\n  update(): void;\n  style( prop: string, value: string | number, useContainer?: boolean ): void\n  isWithin( from: number, distance: number ): boolean;\n}\n\n/**\n * The sub component for managing each slide.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param index      - A slide index.\n * @param slideIndex - A slide index for clones. This must be `-1` if the slide is not a clone.\n * @param slide      - A slide element.\n *\n * @return A Slide sub component.\n */\nexport function Slide( Splide: Splide, index: number, slideIndex: number, slide: HTMLElement ): SlideComponent {\n  const { on, emit, bind, destroy: destroyEvents } = EventInterface( Splide );\n  const { Components, root, options } = Splide;\n  const { isNavigation, updateOnMove, i18n } = options;\n  const { resolve } = Components.Direction;\n  const styles         = getAttribute( slide, 'style' );\n  const isClone        = slideIndex > -1;\n  const container      = child( slide, `.${ CLASS_CONTAINER }` );\n  const focusableNodes = options.focusableNodes && queryAll( slide, options.focusableNodes );\n\n  /**\n   * Turns into `true` when the component is destroyed.\n   */\n  let destroyed: boolean;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount( this: SlideComponent ): void {\n    if ( ! isClone ) {\n      slide.id = `${ root.id }-slide${ pad( index + 1 ) }`;\n      setAttribute( slide, ROLE, 'group' );\n      setAttribute( slide, ARIA_ROLEDESCRIPTION, i18n.slide );\n      setAttribute( slide, ARIA_LABEL, format( i18n.slideLabel, [ index + 1, Splide.length ] ) );\n    }\n\n    listen();\n  }\n\n  /**\n   * Listens to some events.\n   */\n  function listen(): void {\n    bind( slide, 'click keydown', e => {\n      emit( e.type === 'click' ? EVENT_CLICK : EVENT_SLIDE_KEYDOWN, self, e );\n    } );\n\n    on( [ EVENT_REFRESH, EVENT_REPOSITIONED, EVENT_SHIFTED, EVENT_MOVED, EVENT_SCROLLED ], update );\n    on( EVENT_NAVIGATION_MOUNTED, initNavigation );\n\n    if ( updateOnMove ) {\n      on( EVENT_MOVE, onMove );\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    destroyed = true;\n    destroyEvents();\n    removeClass( slide, STATUS_CLASSES );\n    removeAttribute( slide, ALL_ATTRIBUTES );\n    setAttribute( slide, 'style', styles );\n  }\n\n  /**\n   * Initializes slides as navigation.\n   */\n  function initNavigation(): void {\n    const idx      = isClone ? slideIndex : index;\n    const label    = format( i18n.slideX, idx + 1 );\n    const controls = Splide.splides.map( target => target.splide.root.id ).join( ' ' );\n\n    setAttribute( slide, ARIA_LABEL, label );\n    setAttribute( slide, ARIA_CONTROLS, controls );\n    setAttribute( slide, ROLE, 'menuitem' );\n\n    updateActivity( isActive() );\n  }\n\n  /**\n   * If the `updateOnMove` option is `true`, called when the slider starts moving.\n   */\n  function onMove(): void {\n    if ( ! destroyed ) {\n      update();\n    }\n  }\n\n  /**\n   * Updates attribute and classes of the slide.\n   */\n  function update(): void {\n    if ( ! destroyed ) {\n      const { index: currIndex } = Splide;\n\n      updateActivity( isActive() );\n      updateVisibility( isVisible() );\n\n      toggleClass( slide, CLASS_PREV, index === currIndex - 1 );\n      toggleClass( slide, CLASS_NEXT, index === currIndex + 1 );\n    }\n  }\n\n  /**\n   * Updates the status related with activity.\n   *\n   * @param active - Set `true` if the slide is active.\n   */\n  function updateActivity( active: boolean ): void {\n    if ( active !== hasClass( slide, CLASS_ACTIVE ) ) {\n      toggleClass( slide, CLASS_ACTIVE, active );\n\n      if ( isNavigation ) {\n        setAttribute( slide, ARIA_CURRENT, active || null );\n      }\n\n      emit( active ? EVENT_ACTIVE : EVENT_INACTIVE, self );\n    }\n  }\n\n  /**\n   * Updates classes and attributes related with visibility.\n   *\n   * @param visible - Set `true` if the slide is visible.\n   */\n  function updateVisibility( visible: boolean ): void {\n    const hidden = ! visible && ( ! isActive() || isClone );\n\n    setAttribute( slide, ARIA_HIDDEN, hidden || null );\n    setAttribute( slide, TAB_INDEX, ! hidden && options.slideFocus ? 0 : null );\n    setAttribute( focusableNodes || [], TAB_INDEX, hidden ? -1 : null );\n\n    if ( visible !== hasClass( slide, CLASS_VISIBLE ) ) {\n      toggleClass( slide, CLASS_VISIBLE, visible );\n      emit( visible ? EVENT_VISIBLE : EVENT_HIDDEN, self );\n    }\n  }\n\n  /**\n   * Adds a CSS rule to the slider or the container.\n   *\n   * @param prop         - A property name.\n   * @param value        - A CSS value to add.\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\n   */\n  function style( prop: string, value: string | number, useContainer?: boolean ): void {\n    _style( ( useContainer && container ) || slide, prop, value );\n  }\n\n  /**\n   * Checks if the slide is active or not.\n   *\n   * @return `true` if the slide is active.\n   */\n  function isActive(): boolean {\n    const { index: curr } = Splide;\n    return curr === index || ( options.cloneStatus && curr === slideIndex );\n  }\n\n  /**\n   * Checks if the slide is visible or not.\n   */\n  function isVisible(): boolean {\n    if ( Splide.is( FADE ) ) {\n      return isActive();\n    }\n\n    const trackRect = rect( Components.Elements.track );\n    const slideRect = rect( slide );\n    const left      = resolve( 'left' );\n    const right     = resolve( 'right' );\n\n    return floor( trackRect[ left ] ) <= ceil( slideRect[ left ] )\n      && floor( slideRect[ right ] ) <= ceil( trackRect[ right ] );\n  }\n\n  /**\n   * Calculates how far this slide is from another slide and\n   * returns `true` if the distance is within the given number.\n   *\n   * @param from     - An index of a base slide.\n   * @param distance - `true` if the slide is within this number.\n   *\n   * @return `true` if the slide is within the `distance` from the base slide, or otherwise `false`.\n   */\n  function isWithin( from: number, distance: number ): boolean {\n    let diff = abs( from - index );\n\n    if ( ! isClone && ( options.rewind || Splide.is( LOOP ) ) ) {\n      diff = min( diff, Splide.length - diff );\n    }\n\n    return diff <= distance;\n  }\n\n  const self = {\n    index,\n    slideIndex,\n    slide,\n    container,\n    isClone,\n    mount,\n    destroy,\n    update,\n    style,\n    isWithin,\n  };\n\n  return self;\n}\n","import { DATA_ATTRIBUTE } from '../../constants/project';\n\n\n/**\n * The data attribute for the autoplay interval duration.\n *\n * @since 3.5.0\n */\nexport const INTERVAL_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-interval`;\n","/**\n * AddEventListenerOptions for listeners that may prevent the browser scroll.\n *\n * @since 3.4.1\n */\nexport const SCROLL_LISTENER_OPTIONS = { passive: false, capture: true };\n","/**\n * The power of the friction.\n *\n * @since 3.0.0\n */\nexport const FRICTION = 5;\n\n/**\n * If the user stops dragging for this duration with keeping the pointer down, updates the base coord and time.\n *\n * @since 3.0.0\n */\nexport const LOG_INTERVAL = 200;\n\n/**\n * Start events for dragging.\n *\n * @since 3.0.0\n */\nexport const POINTER_DOWN_EVENTS = 'touchstart mousedown';\n\n/**\n * Update events for dragging.\n *\n * @since 3.0.0\n */\nexport const POINTER_MOVE_EVENTS = 'touchmove mousemove';\n\n/**\n * End events for dragging.\n *\n * @since 3.0.0\n */\nexport const POINTER_UP_EVENTS = 'touchend touchcancel mouseup';\n","import { TAB_INDEX } from '../../constants/attributes';\nimport { EVENT_MOVE, EVENT_UPDATED } from '../../constants/events';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { includes, nextTick, setAttribute } from '../../utils';\n\n\n/**\n * The interface for the Keyboard component.\n *\n * @since 3.0.0\n */\nexport interface KeyboardComponent extends BaseComponent {\n  disable( disabled: boolean ): void;\n}\n\n/**\n * Arrow keys of IE.\n *\n * @since 3.0.0\n */\nconst IE_ARROW_KEYS = [ 'Left', 'Right', 'Up', 'Down' ];\n\n/**\n * The keyboard event name.\n *\n * @since 3.6.0\n */\nconst KEYBOARD_EVENT = 'keydown';\n\n/**\n * The component for controlling the slider by keyboards.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Keyboard component object.\n */\nexport function Keyboard( Splide: Splide, Components: Components, options: Options ): KeyboardComponent {\n  const { on, bind, unbind } = EventInterface( Splide );\n  const { root } = Splide;\n  const { resolve } = Components.Direction;\n\n  /**\n   * The target element of the keyboard event.\n   */\n  let target: Window | HTMLElement;\n\n  /**\n   * Indicates whether the component is currently disabled or not.\n   */\n  let disabled: boolean;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n    on( EVENT_UPDATED, onUpdated );\n    on( EVENT_MOVE, onMove );\n  }\n\n  /**\n   * Initializes the component.\n   */\n  function init(): void {\n    const { keyboard } = options;\n\n    if ( keyboard ) {\n      if ( keyboard === 'focused' ) {\n        target = root;\n        setAttribute( root, TAB_INDEX, 0 );\n      } else {\n        target = window;\n      }\n\n      bind( target, KEYBOARD_EVENT, onKeydown );\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    unbind( target, KEYBOARD_EVENT );\n  }\n\n  /**\n   * Disables the keyboard input.\n   *\n   * @param value - Toggles disabling/enabling the keyboard input.\n   */\n  function disable( value: boolean ): void {\n    disabled = value;\n  }\n\n  /**\n   * Called when the slider moves.\n   * To avoid the slider from moving twice, wait for a tick.\n   */\n  function onMove(): void {\n    const _disabled = disabled;\n    disabled = true;\n    nextTick( () => { disabled = _disabled } );\n  }\n\n  /**\n   * Called when options are update.\n   */\n  function onUpdated(): void {\n    destroy();\n    init();\n  }\n\n  /**\n   * Called when any key is pressed on the target.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  function onKeydown( e: KeyboardEvent ): void {\n    if ( ! disabled ) {\n      const { key } = e;\n      const normalizedKey = includes( IE_ARROW_KEYS, key ) ? `Arrow${ key }` : key;\n\n      if ( normalizedKey === resolve( 'ArrowLeft' ) ) {\n        Splide.go( '<' );\n      } else if ( normalizedKey === resolve( 'ArrowRight' ) ) {\n        Splide.go( '>' );\n      }\n    }\n  }\n\n  return {\n    mount,\n    destroy,\n    disable,\n  };\n}\n","import { DATA_ATTRIBUTE } from '../../constants/project';\n\n\n/**\n * The data attribute for the src value.\n *\n * @since 3.0.0\n */\nexport const SRC_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-lazy`;\n\n/**\n * The data attribute for the srcset value.\n *\n * @since 3.0.0\n */\nexport const SRCSET_DATA_ATTRIBUTE = `${ SRC_DATA_ATTRIBUTE }-srcset`;\n\n/**\n * The selector string for images to load.\n *\n * @since 3.0.0\n */\nexport const IMAGE_SELECTOR = `[${ SRC_DATA_ATTRIBUTE }], [${ SRCSET_DATA_ATTRIBUTE }]`;\n","import { ALL_ATTRIBUTES, ARIA_ORIENTATION, ROLE } from '../../constants/attributes';\nimport { TTB } from '../../constants/directions';\nimport {\n  EVENT_CLICK,\n  EVENT_MOUNTED,\n  EVENT_MOVE,\n  EVENT_NAVIGATION_MOUNTED,\n  EVENT_SLIDE_KEYDOWN,\n  EVENT_UPDATED,\n} from '../../constants/events';\nimport { LOOP } from '../../constants/types';\nimport { EventInterface, EventInterfaceObject } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { empty, includes, prevent, removeAttribute, setAttribute } from '../../utils';\nimport { SlideComponent } from '../Slides/Slide';\n\n\n/**\n * The interface for the Sync component.\n *\n * @since 3.0.0\n */\nexport interface SyncComponent extends BaseComponent {\n  remount(): void;\n}\n\n/**\n * The keys for triggering the navigation slide.\n *\n * @since 3.0.0\n */\nconst TRIGGER_KEYS = [ ' ', 'Enter', 'Spacebar' ];\n\n/**\n * The component for syncing multiple sliders.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Sync component object.\n */\nexport function Sync( Splide: Splide, Components: Components, options: Options ): SyncComponent {\n  const { list } = Components.Elements;\n  const events: EventInterfaceObject[] = [];\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    Splide.splides.forEach( target => {\n      ! target.isParent && sync( target.splide );\n    } );\n\n    if ( options.isNavigation ) {\n      navigate();\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    removeAttribute( list, ALL_ATTRIBUTES );\n    events.forEach( event => { event.destroy() } );\n    empty( events );\n  }\n\n  /**\n   * Remounts the component.\n   *\n   * @internal\n   */\n  function remount(): void {\n    destroy();\n    mount();\n  }\n\n  /**\n   * Syncs the current index with a provided child splide instance.\n   *\n   * @param splide - A splide instance to sync with.\n   */\n  function sync( splide: Splide ): void {\n    [ Splide, splide ].forEach( instance => {\n      const event  = EventInterface( instance );\n      const target = instance === Splide ? splide : Splide;\n\n      event.on( EVENT_MOVE, ( index, prev, dest ) => {\n        target.go( target.is( LOOP ) ? dest : index );\n      } );\n\n      events.push( event );\n    } );\n  }\n\n  /**\n   * Makes slides clickable and moves the slider to the index of clicked slide.\n   * Note that the direction of `menu` is implicitly `vertical` as default.\n   */\n  function navigate(): void {\n    const event = EventInterface( Splide );\n    const { on } = event;\n\n    on( EVENT_CLICK, onClick );\n    on( EVENT_SLIDE_KEYDOWN, onKeydown );\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], update );\n\n    setAttribute( list, ROLE, 'menu' );\n    events.push( event );\n    event.emit( EVENT_NAVIGATION_MOUNTED, Splide.splides );\n  }\n\n  /**\n   * Update attributes.\n   */\n  function update(): void {\n    setAttribute( list, ARIA_ORIENTATION, options.direction !== TTB ? 'horizontal' : null );\n  }\n\n  /**\n   * Called when the navigation slide is clicked.\n   *\n   * @param Slide - A clicked Slide component.\n   */\n  function onClick( Slide: SlideComponent ): void {\n    Splide.go( Slide.index );\n  }\n\n  /**\n   * Called when any key is pressed on the navigation slide.\n   *\n   * @param Slide - A Slide component.\n   * @param e     - A KeyboardEvent object.\n   */\n  function onKeydown( Slide: SlideComponent, e: KeyboardEvent ): void {\n    if ( includes( TRIGGER_KEYS, e.key ) ) {\n      onClick( Slide );\n      prevent( e );\n    }\n  }\n\n  return {\n    mount,\n    destroy,\n    remount,\n  };\n}\n","import { DESTROYED } from '../../constants/states';\nimport { Throttle } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { find, merge } from '../../utils';\n\n\n/**\n * The interface for the Options component.\n *\n * @since 3.0.0\n */\nexport interface OptionsComponent extends BaseComponent {\n}\n\n/**\n * The component for managing options.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An Options component object.\n */\nexport function Options( Splide: Splide, Components: Components, options: Options ): OptionsComponent {\n  /**\n   * The throttled `observe` function.\n   */\n  const throttledObserve = Throttle( observe );\n\n  /**\n   * Keeps the initial options to apply when no matched query exists.\n   */\n  let initialOptions: Options;\n\n  /**\n   * Stores breakpoints with the MediaQueryList object.\n   */\n  let points: [ string, MediaQueryList ][];\n\n  /**\n   * Holds the current breakpoint.\n   */\n  let currPoint: string | undefined;\n\n  /**\n   * Called when the component is constructed.\n   */\n  function setup(): void {\n    initialOptions = merge( {}, options );\n\n    const { breakpoints } = options;\n\n    if ( breakpoints ) {\n      const isMin = options.mediaQuery === 'min';\n\n      points = Object.keys( breakpoints )\n        .sort( ( n, m ) => isMin ? +m - +n : +n - +m )\n        .map( point => [\n          point,\n          matchMedia( `(${ isMin ? 'min' : 'max' }-width:${ point }px)` ),\n        ] );\n\n      observe();\n    }\n  }\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    if ( points ) {\n      addEventListener( 'resize', throttledObserve );\n    }\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * @param completely - Will be `true` for complete destruction.\n   */\n  function destroy( completely: boolean ): void {\n    if ( completely ) {\n      removeEventListener( 'resize', throttledObserve );\n    }\n  }\n\n  /**\n   * Observes breakpoints.\n   * The `currPoint` may be `undefined`.\n   */\n  function observe(): void {\n    const item = find( points, item => item[ 1 ].matches ) || [];\n\n    if ( item[ 0 ] !== currPoint ) {\n      onMatch( ( currPoint = item[ 0 ] ) );\n    }\n  }\n\n  /**\n   * Called when the media query matches breakpoints.\n   *\n   * @param point - A matched point, or `undefined` that means no breakpoint matches a media query.\n   */\n  function onMatch( point: string | undefined ): void {\n    const newOptions = options.breakpoints[ point ] || initialOptions;\n\n    if ( newOptions.destroy ) {\n      Splide.options = initialOptions;\n      Splide.destroy( newOptions.destroy === 'completely' );\n    } else {\n      if ( Splide.state.is( DESTROYED ) ) {\n        destroy( true );\n        Splide.mount();\n      }\n\n      Splide.options = newOptions;\n    }\n  }\n\n  return {\n    setup,\n    mount,\n    destroy,\n  };\n}\n","import { slice } from '../slice/slice';\n\n\n/**\n * The find method for an array or array-like object, works in IE.\n * This method is not performant for a huge array.\n *\n * @param arrayLike - An array-like object.\n * @param predicate - The predicate function to test each element in the object.\n *\n * @return A found value if available, or otherwise `undefined`.\n */\nexport function find<T>(\n  arrayLike: ArrayLike<T>,\n  predicate: ( value: T, index: number, array: T[] ) => any\n): T | undefined {\n  return slice( arrayLike ).filter( predicate )[ 0 ];\n}\n","/**\n * Enumerates slides from left to right.\n */\nexport const LTR = 'ltr';\n\n/**\n * Enumerates slides from right to left.\n */\nexport const RTL = 'rtl';\n\n/**\n * Enumerates slides in a col.\n */\nexport const TTB = 'ttb';\n","import { ALL_ATTRIBUTES, ARIA_ROLEDESCRIPTION, ROLE } from '../../constants/attributes';\nimport {\n  CLASS_ACTIVE,\n  CLASS_ARROW_NEXT,\n  CLASS_ARROW_PREV,\n  CLASS_ARROWS,\n  CLASS_AUTOPLAY,\n  CLASS_CLONE,\n  CLASS_LIST,\n  CLASS_PAUSE,\n  CLASS_PLAY,\n  CLASS_PROGRESS,\n  CLASS_PROGRESS_BAR,\n  CLASS_ROOT,\n  CLASS_SLIDE,\n  CLASS_SLIDER,\n  CLASS_TRACK,\n} from '../../constants/classes';\nimport { EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\nimport { DEFAULT_EVENT_PRIORITY } from '../../constants/priority';\nimport { PROJECT_CODE } from '../../constants/project';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport {\n  addClass,\n  assert,\n  assign,\n  child,\n  children,\n  empty,\n  push,\n  query,\n  removeAttribute,\n  removeClass,\n  setAttribute,\n  uniqueId,\n} from '../../utils';\n\n\n/**\n * The interface for elements which the slider consists of.\n *\n * @since 3.0.0\n */\nexport interface ElementCollection {\n  root: HTMLElement;\n  slider: HTMLElement;\n  track: HTMLElement;\n  list: HTMLElement;\n  slides: HTMLElement[];\n  arrows: HTMLElement;\n  prev: HTMLButtonElement;\n  next: HTMLButtonElement;\n  bar: HTMLElement;\n  autoplay: HTMLElement;\n  play: HTMLButtonElement;\n  pause: HTMLButtonElement;\n}\n\n/**\n * The interface for the Elements component.\n *\n * @since 3.0.0\n */\nexport interface ElementsComponent extends BaseComponent, ElementCollection {\n}\n\n/**\n * The component that collects and handles elements which the slider consists of.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An Elements component object.\n */\nexport function Elements( Splide: Splide, Components: Components, options: Options ): ElementsComponent {\n  const { on } = EventInterface( Splide );\n  const { root } = Splide;\n  const { i18n } = options;\n  const elements: ElementCollection = {} as ElementCollection;\n\n  /**\n   * Stores all slide elements.\n   */\n  const slides: HTMLElement[] = [];\n\n  /**\n   * Stores all root classes.\n   */\n  let classes: string[];\n\n  /**\n   * The slider element that may be `undefined`.\n   */\n  let slider: HTMLElement;\n\n  /**\n   * The track element.\n   */\n  let track: HTMLElement;\n\n  /**\n   * The list element.\n   */\n  let list: HTMLElement;\n\n  /**\n   * Called when the component is constructed.\n   */\n  function setup(): void {\n    collect();\n    init();\n    addClass( root, ( classes = getClasses() ) );\n  }\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    const priority = DEFAULT_EVENT_PRIORITY - 2;\n    on( EVENT_REFRESH, destroy, priority );\n    on( EVENT_REFRESH, setup, priority );\n    on( EVENT_UPDATED, update );\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    empty( slides );\n    removeClass( root, classes );\n    removeAttribute( [ root, track, list ], ALL_ATTRIBUTES.concat( 'style' ) );\n  }\n\n  /**\n   * Updates the status of elements.\n   */\n  function update(): void {\n    removeClass( root, classes );\n    addClass( root, ( classes = getClasses() ) );\n  }\n\n  /**\n   * Collects elements which the slider consists of.\n   */\n  function collect(): void {\n    slider = child( root, `.${ CLASS_SLIDER }` );\n    track  = query( root, `.${ CLASS_TRACK }` );\n    list   = child( track, `.${ CLASS_LIST }` );\n\n    try {\n      assert( track && list, 'A track/list element is missing.' );\n    } catch ( error ) {\n      console.error( error );\n    }\n    \n\n    push( slides, children( list, `.${ CLASS_SLIDE }:not(.${ CLASS_CLONE })` ) );\n\n    const autoplay = find( `.${ CLASS_AUTOPLAY }` );\n    const arrows   = find( `.${ CLASS_ARROWS }` );\n\n    assign( elements, {\n      root,\n      slider,\n      track,\n      list,\n      slides,\n      arrows,\n      autoplay,\n      prev : query( arrows, `.${ CLASS_ARROW_PREV }` ),\n      next : query( arrows, `.${ CLASS_ARROW_NEXT }` ),\n      bar  : query( find( `.${ CLASS_PROGRESS }` ), `.${ CLASS_PROGRESS_BAR }` ),\n      play : query( autoplay, `.${ CLASS_PLAY }` ),\n      pause: query( autoplay, `.${ CLASS_PAUSE }` ),\n    } );\n  }\n\n  /**\n   * Initializes essential elements.\n   */\n  function init(): void {\n    const id = root.id || uniqueId( PROJECT_CODE );\n    root.id  = id;\n    track.id = track.id || `${ id }-track`;\n    list.id  = list.id || `${ id }-list`;\n\n    setAttribute( root, ARIA_ROLEDESCRIPTION, i18n.carousel );\n    setAttribute( root, ROLE, root.tagName !== 'SECTION' && options.role || null );\n    setAttribute( list, ROLE, 'none' );\n  }\n\n  /**\n   * Finds an element only in children of the root or slider element.\n   *\n   * @return {Element} - A found element or undefined.\n   */\n  function find( selector: string ): HTMLElement {\n    return child( root, selector ) || child( slider, selector );\n  }\n\n  /**\n   * Return an array with classes for the root element.\n   *\n   * @return An array with classes.\n   */\n  function getClasses(): string[] {\n    return [\n      `${ CLASS_ROOT }--${ options.type }`,\n      `${ CLASS_ROOT }--${ options.direction }`,\n      options.drag && `${ CLASS_ROOT }--draggable`,\n      options.isNavigation && `${ CLASS_ROOT }--nav`,\n      CLASS_ACTIVE,\n    ];\n  }\n\n  return assign( elements, {\n    setup,\n    mount,\n    destroy,\n  } );\n}\n","import { EVENT_MOUNTED, EVENT_REFRESH, EVENT_RESIZE } from '../../constants/events';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\nimport {\n  addClass,\n  append, apply,\n  before,\n  between,\n  empty,\n  forEach as forEachItem,\n  includes,\n  isFunction,\n  isHTMLElement,\n  isString,\n  matches,\n  parseHtml,\n  queryAll,\n  remove as removeNode,\n  toArray,\n} from '../../utils';\nimport { Slide, SlideComponent } from './Slide';\n\n\n/**\n * The interface for the Slides component.\n *\n * @since 3.0.0\n */\nexport interface  SlidesComponent extends BaseComponent {\n  update(): void;\n  register( slide: HTMLElement, index: number, slideIndex: number ): void;\n  get( excludeClones?: boolean ): SlideComponent[];\n  getIn( page: number ): SlideComponent[];\n  getAt( index: number ): SlideComponent | undefined;\n  add( slide: string | Element | Array<string | Element>, index?: number ): void;\n  remove( selector: SlideMatcher ): void;\n  forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void;\n  filter( matcher: SlideMatcher ): SlideComponent[];\n  style( prop: string, value: string | number, useContainer?: boolean ): void\n  getLength( excludeClones?: boolean ): number;\n  isEnough(): boolean;\n}\n\n/**\n * The iteratee function for Slides.\n *\n * @since 3.0.0\n */\nexport type SlidesIteratee = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => void\n\n/**\n * The predicate function for Slides.\n *\n * @since 3.0.0\n */\nexport type SlidesPredicate = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => any\n\n/**\n * The type for filtering SlideComponent objects.\n *\n * @since 3.0.0\n */\nexport type SlideMatcher = number | number[] | string | SlidesPredicate;\n\n/**\n * The component for managing all slides include clones.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An Slides component object.\n */\nexport function Slides( Splide: Splide, Components: Components, options: Options ): SlidesComponent {\n  const { on, emit, bind } = EventInterface( Splide );\n  const { slides, list } = Components.Elements;\n\n  /**\n   * Stores all SlideComponent objects.\n   */\n  const Slides: SlideComponent[] = [];\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n    on( EVENT_REFRESH, destroy );\n    on( EVENT_REFRESH, init );\n    on( [ EVENT_MOUNTED, EVENT_REFRESH ], () => {\n      Slides.sort( ( Slide1, Slide2 ) => Slide1.index - Slide2.index );\n    } );\n  }\n\n  /**\n   * Initializes the component.\n   */\n  function init(): void {\n    slides.forEach( ( slide, index ) => { register( slide, index, -1 ) } );\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    forEach( Slide => { Slide.destroy() } );\n    empty( Slides );\n  }\n\n  /**\n   * Manually updates the status of all slides.\n   */\n  function update(): void {\n    forEach( Slide => { Slide.update() } );\n  }\n\n  /**\n   * Registers a slide element and creates a Slide object.\n   *\n   * @param slide      - A slide element to register.\n   * @param index      - A slide index.\n   * @param slideIndex - A slide index for clones. This must be `-1` for regular slides.\n   */\n  function register( slide: HTMLElement, index: number, slideIndex: number ): void {\n    const object = Slide( Splide, index, slideIndex, slide );\n    object.mount();\n    Slides.push( object );\n  }\n\n  /**\n   * Returns all Slide objects.\n   *\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\n   *\n   * @return An array with Slide objects.\n   */\n  function get( excludeClones?: boolean ): SlideComponent[] {\n    return excludeClones ? filter( Slide => ! Slide.isClone ) : Slides;\n  }\n\n  /**\n   * Returns slides in the specified page.\n   *\n   * @param page - A page index.\n   *\n   * @return An array with slides that belong to the page.\n   */\n  function getIn( page: number ): SlideComponent[] {\n    const { Controller } = Components;\n    const index = Controller.toIndex( page );\n    const max   = Controller.hasFocus() ? 1 : options.perPage;\n    return filter( Slide => between( Slide.index, index, index + max - 1 ) );\n  }\n\n  /**\n   * Returns a Slide object at the specified index.\n   *\n   * @param index - A slide index.\n   *\n   * @return A Slide object if available, or otherwise `undefined`.\n   */\n  function getAt( index: number ): SlideComponent | undefined {\n    return filter( index )[ 0 ];\n  }\n\n  /**\n   * Inserts a slide or slides at a specified index.\n   *\n   * @param items - A slide element, an HTML string or an array with them.\n   * @param index - Optional. An index to insert the slide at. If omitted, appends it to the list.\n   */\n  function add( items: string | Element | Array<string | Element>, index?: number ): void {\n    forEachItem( items, slide => {\n      if ( isString( slide ) ) {\n        slide = parseHtml( slide );\n      }\n\n      if ( isHTMLElement( slide ) ) {\n        const ref = slides[ index ];\n        ref ? before( slide, ref ) : append( list, slide );\n        addClass( slide, options.classes.slide );\n        observeImages( slide, apply( emit, EVENT_RESIZE ) );\n      }\n    } );\n\n    emit( EVENT_REFRESH );\n  }\n\n  /**\n   * Removes slides that match the matcher\n   * that can be an index, an array with indices, a selector, or an iteratee function.\n   *\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\n   */\n  function remove( matcher: SlideMatcher ): void {\n    removeNode( filter( matcher ).map( Slide => Slide.slide ) );\n    emit( EVENT_REFRESH );\n  }\n\n  /**\n   * Iterates over Slide objects by the iteratee function.\n   *\n   * @param iteratee      - An iteratee function that takes a Slide object, an index and an array with Slides.\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\n   */\n  function forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void {\n    get( excludeClones ).forEach( iteratee );\n  }\n\n  /**\n   * Filters Slides by the matcher\n   * that can be an index, an array with indices, a selector, or a predicate function.\n   *\n   * @param matcher - An index, an array with indices, a selector string, or a predicate function.\n   *\n   * @return An array with SlideComponent objects.\n   */\n  function filter( matcher: SlideMatcher ): SlideComponent[] {\n    return Slides.filter( isFunction( matcher )\n      ? matcher\n      : Slide => isString( matcher )\n        ? matches( Slide.slide, matcher )\n        : includes( toArray( matcher ), Slide.index )\n    );\n  }\n\n  /**\n   * Adds a CSS rule to all slides or containers.\n   *\n   * @param prop         - A property name.\n   * @param value        - A CSS value to add.\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\n   */\n  function style( prop: string, value: string | number, useContainer?: boolean ): void {\n    forEach( Slide => { Slide.style( prop, value, useContainer ) } );\n  }\n\n  /**\n   * Invokes the callback after all images in the element are loaded.\n   *\n   * @param elm      - An element that may contain images.\n   * @param callback - A callback function.\n   */\n  function observeImages( elm: Element, callback: AnyFunction ): void {\n    const images = queryAll( elm, 'img' );\n    let { length } = images;\n\n    if ( length ) {\n      images.forEach( img => {\n        bind( img, 'load error', () => {\n          if ( ! --length ) {\n            callback();\n          }\n        } );\n      } );\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Returns the length of slides.\n   *\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\n   *\n   * @return The length of slides.\n   */\n  function getLength( excludeClones?: boolean ): number {\n    return excludeClones ? slides.length : Slides.length;\n  }\n\n  /**\n   * Checks if the number of slides is over than the `perPage` option, including clones.\n   *\n   * @return `true` if there are enough slides, or otherwise `false`.\n   */\n  function isEnough(): boolean {\n    return Slides.length > options.perPage;\n  }\n\n  return {\n    mount,\n    destroy,\n    update,\n    register,\n    get,\n    getIn,\n    getAt,\n    add,\n    remove,\n    forEach,\n    filter,\n    style,\n    getLength,\n    isEnough,\n  };\n}\n","import { TTB } from '../../constants/directions';\nimport { EVENT_REFRESH, EVENT_RESIZE, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\nimport { EventInterface, Throttle } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { abs, assert, isObject, rect, style, unit } from '../../utils';\n\n\n/**\n * The interface for the Layout component.\n *\n * @since 3.0.0\n */\nexport interface LayoutComponent extends BaseComponent {\n  listSize(): number;\n  slideSize( index: number, withoutGap?: boolean ): number;\n  sliderSize(): number;\n  totalSize( index?: number, withoutGap?: boolean ): number;\n  getPadding( right: boolean ): number;\n}\n\n/**\n * The component that layouts slider components and provides methods for dimensions.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An Layout component object.\n */\nexport function Layout( Splide: Splide, Components: Components, options: Options ): LayoutComponent {\n  const { on, bind, emit } = EventInterface( Splide );\n  const { Slides } = Components;\n  const { resolve } = Components.Direction;\n  const { root, track, list } = Components.Elements;\n  const { getAt } = Slides;\n\n  /**\n   * Indicates whether the slider direction is vertical or not.\n   */\n  let vertical: boolean;\n\n  /**\n   * Keeps the DOMRect object of the root element.\n   */\n  let rootRect: DOMRect;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n    bind( window, 'resize load', Throttle( emit.bind( this, EVENT_RESIZE ) ) );\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\n    on( EVENT_RESIZE, resize );\n  }\n\n  /**\n   * Initializes the component on `mount` or `updated`.\n   * Uses `max-width` for the root to prevent the slider from exceeding the parent element.\n   */\n  function init(): void {\n    rootRect = null;\n    vertical = options.direction === TTB;\n\n    style( root, 'maxWidth', unit( options.width ) );\n    style( track, resolve( 'paddingLeft' ), cssPadding( false ) );\n    style( track, resolve( 'paddingRight' ), cssPadding( true ) );\n\n    resize();\n  }\n\n  /**\n   * Updates dimensions of some elements when the slider is resized.\n   */\n  function resize(): void {\n    const newRect = rect( root );\n\n    if ( ! rootRect || rootRect.width !== newRect.width || rootRect.height !== newRect.height ) {\n      style( track, 'height', cssTrackHeight() );\n\n      Slides.style( resolve( 'marginRight' ), unit( options.gap ) );\n      Slides.style( 'width', cssSlideWidth() || null );\n      setSlidesHeight();\n\n      rootRect = newRect;\n      emit( EVENT_RESIZED );\n    }\n  }\n\n  /**\n   * Updates the height of slides or their container elements if available.\n   */\n  function setSlidesHeight(): void {\n    Slides.style( 'height', cssSlideHeight() || null, true );\n  }\n\n  /**\n   * Parses the padding option and returns the value for each side.\n   * This method returns `paddingTop` or `paddingBottom` for the vertical slider.\n   *\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\n   *\n   * @return The padding value as a CSS string.\n   */\n  function cssPadding( right: boolean ): string {\n    const { padding } = options;\n    const prop = resolve( right ? 'right' : 'left' );\n    return padding && unit( padding[ prop ] || ( isObject( padding ) ? 0 : padding ) ) || '0px';\n  }\n\n  /**\n   * Returns the height of the track element as a CSS string.\n   *\n   * @return The height of the track.\n   */\n  function cssTrackHeight(): string {\n    let height = '';\n\n    if ( vertical ) {\n      height = cssHeight();\n      assert( height, 'height or heightRatio is missing.' );\n      height = `calc(${ height } - ${ cssPadding( false ) } - ${ cssPadding( true ) })`;\n    }\n\n    return height;\n  }\n\n  /**\n   * Converts options related with height to a CSS string.\n   *\n   * @return The height as a CSS string if available, or otherwise an empty string.\n   */\n  function cssHeight(): string {\n    return unit( options.height || rect( list ).width * options.heightRatio );\n  }\n\n  /**\n   * Returns the width of the slide as a CSS string.\n   *\n   * @return The width of the slide.\n   */\n  function cssSlideWidth(): string {\n    return options.autoWidth ? '' : unit( options.fixedWidth ) || ( vertical ? '' : cssSlideSize() );\n  }\n\n  /**\n   * Returns the height of the slide as a CSS string.\n   *\n   * @return The height of the slide.\n   */\n  function cssSlideHeight(): string {\n    return unit( options.fixedHeight )\n      || ( vertical ? ( options.autoHeight ? '' : cssSlideSize() ) : cssHeight() );\n  }\n\n  /**\n   * Returns the CSS string for slide width or height without gap.\n   *\n   * @return The CSS string for slide width or height.\n   */\n  function cssSlideSize(): string {\n    const gap = unit( options.gap );\n    return `calc((100%${ gap && ` + ${ gap }` })/${ options.perPage || 1 }${ gap && ` - ${ gap }` })`;\n  }\n\n  /**\n   * Returns the list width for the horizontal slider, or the height for the vertical slider.\n   *\n   * @return The size of the track element in pixel.\n   */\n  function listSize(): number {\n    return rect( list )[ resolve( 'width' ) ];\n  }\n\n  /**\n   * Returns the slide width for the horizontal slider, or the height for the vertical slider.\n   *\n   * @param index      - Optional. A slide index.\n   * @param withoutGap - Optional. Determines whether to exclude the gap amount or not.\n   *\n   * @return The size of the specified slide element in pixel.\n   */\n  function slideSize( index?: number, withoutGap?: boolean ): number {\n    const Slide = getAt( index || 0 );\n    return Slide\n      ? rect( Slide.slide )[ resolve( 'width' ) ] + ( withoutGap ? 0 : getGap() )\n      : 0;\n  }\n\n  /**\n   * Returns the total width or height of slides from the head of the slider to the specified index.\n   * This includes sizes of clones before the first slide.\n   *\n   * @param index      - A slide index. If omitted, uses the last index.\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\n   *\n   * @return The total width of slides in the horizontal slider, or the height in the vertical one.\n   */\n  function totalSize( index: number, withoutGap?: boolean ): number {\n    const Slide = getAt( index );\n\n    if ( Slide ) {\n      const right = rect( Slide.slide )[ resolve( 'right' ) ];\n      const left  = rect( list )[ resolve( 'left' ) ];\n      return abs( right - left ) + ( withoutGap ? 0 : getGap() );\n    }\n\n    return 0;\n  }\n\n  /**\n   * Returns the slider size without clones before the first slide.\n   *\n   * @return The width or height of the slider without clones.\n   */\n  function sliderSize(): number {\n    return totalSize( Splide.length - 1, true ) - totalSize( -1, true );\n  }\n\n  /**\n   * Returns the gap value.\n   *\n   * @return The gap value in pixel.\n   */\n  function getGap(): number {\n    const Slide = getAt( 0 );\n    return Slide && parseFloat( style( Slide.slide, resolve( 'marginRight' ) ) ) || 0;\n  }\n\n  /**\n   * Returns the padding value.\n   * This method resolves the difference of the direction.\n   *\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\n   *\n   * @return The padding value in pixel.\n   */\n  function getPadding( right: boolean ): number {\n    return parseFloat( style( track, resolve( `padding${ right ? 'Right' : 'Left' }` ) ) ) || 0;\n  }\n\n  return {\n    mount,\n    listSize,\n    slideSize,\n    sliderSize,\n    totalSize,\n    getPadding,\n  };\n}\n","import { EVENT_REFRESH, EVENT_RESIZE, EVENT_UPDATED } from '../../constants/events';\nimport { LOOP } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { addClass, append, before, ceil, empty, measure, pad, push, rect, remove } from '../../utils';\n\n\n/**\n * The interface for the Clone component.\n *\n * @since 3.0.0\n */\nexport interface ClonesComponent extends BaseComponent {\n}\n\n/**\n * The component that generates clones for the loop slider.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Clones component object.\n */\nexport function Clones( Splide: Splide, Components: Components, options: Options ): ClonesComponent {\n  const { on, emit } = EventInterface( Splide );\n  const { Elements, Slides } = Components;\n  const { resolve } = Components.Direction;\n\n  /**\n   * Stores all cloned elements.\n   */\n  const clones: HTMLElement[] = [];\n\n  /**\n   * Keeps the current number of clones.\n   */\n  let cloneCount: number;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n    on( EVENT_REFRESH, destroy );\n    on( EVENT_REFRESH, init );\n    on( [ EVENT_UPDATED, EVENT_RESIZE ], observe );\n  }\n\n  /**\n   * Removes all clones if available, and generates new clones.\n   */\n  function init(): void {\n    if ( ( cloneCount = computeCloneCount() ) ) {\n      generate( cloneCount );\n      emit( EVENT_RESIZE );\n    }\n  }\n\n  /**\n   * Destroys clones.\n   */\n  function destroy(): void {\n    remove( clones );\n    empty( clones );\n  }\n\n  /**\n   * Observes the required clone count and refreshes the slider if necessary.\n   */\n  function observe(): void {\n    if ( cloneCount < computeCloneCount() ) {\n      emit( EVENT_REFRESH );\n    }\n  }\n\n  /**\n   * Generates the specified number of clones.\n   *\n   * @param count - The number of clones to generate for each side.\n   */\n  function generate( count: number ): void {\n    const slides = Slides.get().slice();\n    const { length } = slides;\n\n    if ( length ) {\n      while ( slides.length < count ) {\n        push( slides, slides );\n      }\n\n      push( slides.slice( -count ), slides.slice( 0, count ) ).forEach( ( Slide, index ) => {\n        const isHead = index < count;\n        const clone  = cloneDeep( Slide.slide, index );\n        isHead ? before( clone, slides[ 0 ].slide ) : append( Elements.list, clone );\n        push( clones, clone );\n        Slides.register( clone, index - count + ( isHead ? 0 : length ), Slide.index );\n      } );\n    }\n  }\n\n  /**\n   * Deeply clones the provided element with removing the ID attribute.\n   *\n   * @param elm   - An element to clone.\n   * @param index - An index of the clone.\n   *\n   * @return A cloned element.\n   */\n  function cloneDeep( elm: HTMLElement, index: number ): HTMLElement {\n    const clone = elm.cloneNode( true ) as HTMLElement;\n    addClass( clone, options.classes.clone );\n    clone.id = `${ Splide.root.id }-clone${ pad( index + 1 ) }`;\n    return clone;\n  }\n\n  /**\n   * Returns the number of elements to generate.\n   * This always returns 0 if the slider type is not `'loop'`.\n   *\n   * @return The number of clones.\n   */\n  function computeCloneCount(): number {\n    let { clones } = options;\n\n    if ( ! Splide.is( LOOP ) ) {\n      clones = 0;\n    } else if ( ! clones ) {\n      const fixedSize  = measure( Elements.list, options[ resolve( 'fixedWidth' ) ] );\n      const fixedCount = fixedSize && ceil( rect( Elements.track )[ resolve( 'width' ) ] / fixedSize );\n      const baseCount  = fixedCount || ( options[ resolve( 'autoWidth' ) ] && Splide.length ) || options.perPage;\n\n      clones = baseCount * ( options.drag ? ( options.flickMaxPages || 1 ) + 1 : 2 );\n    }\n\n    return clones;\n  }\n\n  return {\n    mount,\n    destroy,\n  };\n}\n","import { isString } from '../../type/type';\nimport { create } from '../create/create';\nimport { rect } from '../rect/rect';\nimport { remove } from '../remove/remove';\n\n\n/**\n * Attempts to convert the provided value to pixel as the relative value to the parent element.\n *\n * @param parent - A parent element.\n * @param value  - A value to convert.\n *\n * @return A converted value in pixel. Unhandled values will become 0.\n */\nexport function measure( parent: HTMLElement, value: number | string ): number {\n  if ( isString( value ) ) {\n    const div = create( 'div', { style: `width: ${ value }; position: absolute;` }, parent );\n    value = rect( div ).width;\n    remove( div );\n  }\n\n  return value;\n}\n","import {\n  EVENT_MOUNTED,\n  EVENT_MOVE,\n  EVENT_MOVED,\n  EVENT_REFRESH,\n  EVENT_REPOSITIONED,\n  EVENT_RESIZED,\n  EVENT_SHIFTED,\n  EVENT_UPDATED,\n} from '../../constants/events';\nimport { IDLE, MOVING } from '../../constants/states';\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { AnyFunction, BaseComponent, Components, Options, TransitionComponent } from '../../types';\nimport { abs, ceil, clamp, isUndefined, rect, removeAttribute } from '../../utils';\n\n\n/**\n * The interface for the Move component.\n *\n * @since 3.0.0\n */\nexport interface MoveComponent extends BaseComponent {\n  move( dest: number, index: number, prev: number, callback?: AnyFunction ): void;\n  jump( index: number ): void;\n  translate( position: number, preventLoop?: boolean ): void;\n  shift( position: number, backwards: boolean ): number;\n  cancel(): void;\n  toIndex( position: number ): number;\n  toPosition( index: number, trimming?: boolean ): number;\n  getPosition(): number;\n  getLimit( max: boolean ): number;\n  isBusy(): boolean;\n  exceededLimit( max?: boolean | undefined, position?: number ): boolean;\n}\n\n/**\n * The component for moving the slider.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Move component object.\n */\nexport function Move( Splide: Splide, Components: Components, options: Options ): MoveComponent {\n  const { on, emit } = EventInterface( Splide );\n  const { slideSize, getPadding, totalSize, listSize, sliderSize } = Components.Layout;\n  const { resolve, orient } = Components.Direction;\n  const { list, track } = Components.Elements;\n\n  /**\n   * Holds the Transition component.\n   */\n  let Transition: TransitionComponent;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    Transition = Components.Transition;\n    on( [ EVENT_MOUNTED, EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH ], reposition );\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    removeAttribute( list, 'style' );\n  }\n\n  /**\n   * Repositions the slider.\n   * - This must be called before the Slide component checks the visibility.\n   * - Do not call `cancel()` here because LazyLoad may emit resize while transitioning.\n   * - iOS Safari emits window resize event while the user swipes the slider because of the bottom bar.\n   */\n  function reposition(): void {\n    if ( ! isBusy() ) {\n      Components.Scroll.cancel();\n      jump( Splide.index );\n      emit( EVENT_REPOSITIONED );\n    }\n  }\n\n  /**\n   * Moves the slider to the dest index with the Transition component.\n   *\n   * @param dest     - A destination index to go to, including clones'.\n   * @param index    - A slide index.\n   * @param prev     - A previous index.\n   * @param callback - Optional. A callback function invoked after transition ends.\n   */\n  function move( dest: number, index: number, prev: number, callback?: AnyFunction ): void {\n    if ( ! isBusy() ) {\n      const { set } = Splide.state;\n      const position = getPosition();\n\n      if ( dest !== index ) {\n        Transition.cancel();\n        translate( shift( position, dest > index ), true );\n      }\n\n      set( MOVING );\n      emit( EVENT_MOVE, index, prev, dest );\n\n      Transition.start( index, () => {\n        set( IDLE );\n        emit( EVENT_MOVED, index, prev, dest );\n\n        if ( options.trimSpace === 'move' && dest !== prev && position === getPosition() ) {\n          Components.Controller.go( dest > prev ? '>' : '<', false, callback );\n        } else {\n          callback && callback();\n        }\n      } );\n    }\n  }\n\n  /**\n   * Jumps to the slide at the specified index.\n   *\n   * @param index - An index to jump to.\n   */\n  function jump( index: number ): void {\n    translate( toPosition( index, true ) );\n  }\n\n  /**\n   * Moves the slider to the provided position.\n   *\n   * @param position    - The position to move to.\n   * @param preventLoop - Optional. If `true`, sets the provided position as is.\n   */\n  function translate( position: number, preventLoop?: boolean ): void {\n    if ( ! Splide.is( FADE ) ) {\n      const destination = preventLoop ? position : loop( position );\n      list.style.transform = `translate${ resolve( 'X' ) }(${ destination }px)`;\n      position !== destination && emit( EVENT_SHIFTED );\n    }\n  }\n\n  /**\n   * Loops the provided position if it exceeds bounds.\n   *\n   * @param position - A position to loop.\n   */\n  function loop( position: number ): number {\n    if ( Splide.is( LOOP ) ) {\n      const diff        = orient( position - getPosition() );\n      const exceededMin = exceededLimit( false, position ) && diff < 0;\n      const exceededMax = exceededLimit( true, position ) && diff > 0;\n\n      if ( exceededMin || exceededMax ) {\n        position = shift( position, exceededMax );\n      }\n    }\n\n    return position;\n  }\n\n  /**\n   * Adds or subtracts the slider width to the provided position.\n   *\n   * @param position  - A position to shift.\n   * @param backwards - Determines whether to shift the slider backwards or forwards.\n   *\n   * @return The shifted position.\n   */\n  function shift( position: number, backwards: boolean ): number {\n    const excess = position - getLimit( backwards );\n    const size   = sliderSize();\n    position -= orient( size * ( ceil( abs( excess ) / size ) || 1 ) ) * ( backwards ? 1 : -1 );\n    return position;\n  }\n\n  /**\n   * Cancels transition.\n   */\n  function cancel(): void {\n    translate( getPosition() );\n    Transition.cancel();\n  }\n\n  /**\n   * Returns the closest index to the position.\n   *\n   * @param position - A position to convert.\n   *\n   * @return The closest index to the position.\n   */\n  function toIndex( position: number ): number {\n    const Slides = Components.Slides.get();\n\n    let index       = 0;\n    let minDistance = Infinity;\n\n    for ( let i = 0; i < Slides.length; i++ ) {\n      const slideIndex = Slides[ i ].index;\n      const distance   = abs( toPosition( slideIndex, true ) - position );\n\n      if ( distance <= minDistance ) {\n        minDistance = distance;\n        index       = slideIndex;\n      } else {\n        break;\n      }\n    }\n\n    return index;\n  }\n\n  /**\n   * Converts the slide index to the position.\n   *\n   * @param index    - An index to convert.\n   * @param trimming - Optional. Whether to trim edge spaces or not.\n   *\n   * @return The position corresponding with the index.\n   */\n  function toPosition( index: number, trimming?: boolean ): number {\n    const position = orient( totalSize( index - 1 ) - offset( index ) );\n    return trimming ? trim( position ) : position;\n  }\n\n  /**\n   * Returns the current position.\n   *\n   * @return The position of the list element.\n   */\n  function getPosition(): number {\n    const left = resolve( 'left' );\n    return rect( list )[ left ] - rect( track )[ left ] + orient( getPadding( false ) );\n  }\n\n  /**\n   * Trims spaces on the edge of the slider.\n   *\n   * @param position - A position to trim.\n   *\n   * @return A trimmed position.\n   */\n  function trim( position: number ): number {\n    if ( options.trimSpace && Splide.is( SLIDE ) ) {\n      position = clamp( position, 0, orient( sliderSize() - listSize() ) );\n    }\n\n    return position;\n  }\n\n  /**\n   * Returns the offset amount.\n   *\n   * @param index - An index.\n   */\n  function offset( index: number ): number {\n    const { focus } = options;\n    return focus === 'center' ? ( listSize() - slideSize( index, true ) ) / 2 : +focus * slideSize( index ) || 0;\n  }\n\n  /**\n   * Returns the limit number that the slider can move to.\n   *\n   * @param max - Determines whether to return the maximum or minimum limit.\n   *\n   * @return The border number.\n   */\n  function getLimit( max: boolean ): number {\n    return toPosition( max ? Components.Controller.getEnd() : 0, !! options.trimSpace );\n  }\n\n  /**\n   * Checks if the slider can move now or not.\n   *\n   * @return `true` if the slider can move, or otherwise `false`.\n   */\n  function isBusy(): boolean {\n    return Splide.state.is( MOVING ) && options.waitForTransition;\n  }\n\n  /**\n   * Checks if the provided position exceeds the minimum or maximum limit or not.\n   *\n   * @param max      - Optional. `true` for testing max, `false` for min, and `undefined` for both.\n   * @param position - Optional. A position to test. If omitted, tests the current position.\n   *\n   * @return `true` if the position exceeds the limit, or otherwise `false`.\n   */\n  function exceededLimit( max?: boolean | undefined, position?: number ): boolean {\n    position = isUndefined( position ) ? getPosition() : position;\n    const exceededMin = max !== true && orient( position ) < orient( getLimit( false ) );\n    const exceededMax = max !== false && orient( position ) > orient( getLimit( true ) );\n    return exceededMin || exceededMax;\n  }\n\n  return {\n    mount,\n    destroy,\n    move,\n    jump,\n    translate,\n    shift,\n    cancel,\n    toIndex,\n    toPosition,\n    getPosition,\n    getLimit,\n    isBusy,\n    exceededLimit,\n  };\n}\n","import { EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\nimport { DEFAULT_EVENT_PRIORITY } from '../../constants/priority';\nimport { LOOP, SLIDE } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\nimport { approximatelyEqual, between, clamp, floor, isString, isUndefined, max } from '../../utils';\n\n\n/**\n * The interface for the Controller component.\n *\n * @since 3.0.0\n */\nexport interface ControllerComponent extends BaseComponent {\n  go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void;\n  scroll( destination: number, useIndex?: boolean, snap?: boolean, duration?: number, callback?: AnyFunction ): void;\n  getNext( destination?: boolean ): number;\n  getPrev( destination?: boolean ): number;\n  getAdjacent( prev: boolean, destination?: boolean ): number;\n  getEnd(): number;\n  setIndex( index: number ): void;\n  getIndex( prev?: boolean ): number;\n  toIndex( page: number ): number;\n  toPage( index: number ): number;\n  toDest( position: number ): number;\n  hasFocus(): boolean;\n}\n\n/**\n * The component for controlling the slider.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Controller component object.\n */\nexport function Controller( Splide: Splide, Components: Components, options: Options ): ControllerComponent {\n  const { on } = EventInterface( Splide );\n  const { Move } = Components;\n  const { getPosition, getLimit } = Move;\n  const { isEnough, getLength } = Components.Slides;\n  const isLoop  = Splide.is( LOOP );\n  const isSlide = Splide.is( SLIDE );\n\n  /**\n   * The current index.\n   */\n  let currIndex = options.start || 0;\n\n  /**\n   * The previous index.\n   */\n  let prevIndex = currIndex;\n\n  /**\n   * The latest number of slides.\n   */\n  let slideCount: number;\n\n  /**\n   * The latest `perMove` value.\n   */\n  let perMove: number;\n\n  /**\n   * The latest `perMove` value.\n   */\n  let perPage: number;\n\n  /**\n   * The latest `forcePerMove` value.\n   */\n  let forcePerMove: boolean;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init, DEFAULT_EVENT_PRIORITY - 1 );\n  }\n\n  /**\n   * Initializes some parameters.\n   * Needs to check the slides length since the current index may be out of the range after refresh.\n   */\n  function init(): void {\n    slideCount = getLength( true );\n    perMove    = options.perMove;\n    perPage    = options.perPage;\n    forcePerMove    = options.forcePerMove;\n    currIndex  = clamp( currIndex, 0, slideCount - 1 );\n  }\n\n  /**\n   * Moves the slider by the control pattern.\n   *\n   * @see `Splide#go()`\n   *\n   * @param control        - A control pattern.\n   * @param allowSameIndex - Optional. Determines whether to allow to go to the current index or not.\n   * @param callback       - Optional. A callback function invoked after transition ends.\n   */\n  function go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void {\n    const dest = parse( control );\n\n    if ( options.useScroll ) {\n      scroll( dest, true, true, options.speed, callback );\n    } else {\n      const index = loop( dest );\n\n      if ( index > -1 && ! Move.isBusy() && ( allowSameIndex || index !== currIndex ) ) {\n        setIndex( index );\n        Move.move( dest, index, prevIndex, callback );\n      }\n    }\n  }\n\n  /**\n   * Scrolls the slider to the specified destination with updating indices.\n   *\n   * @param destination - A position or an index to scroll to.\n   * @param useIndex    - Optional. Whether to use an index as a destination or not.\n   * @param snap        - Optional. Whether to snap the closest slide or not.\n   * @param duration    - Optional. Specifies the scroll duration.\n   * @param callback    - Optional. A callback function invoked after scroll ends.\n   */\n  function scroll(\n    destination: number,\n    useIndex?: boolean,\n    snap?: boolean,\n    duration?: number,\n    callback?: AnyFunction\n  ): void {\n    const dest = useIndex ? destination : toDest( destination );\n\n    Components.Scroll.scroll( useIndex || snap ? Move.toPosition( dest, true ) : destination, duration, () => {\n      setIndex( Move.toIndex( Move.getPosition() ) );\n      callback && callback();\n    } );\n  }\n\n  /**\n   * Parses the control and returns a slide index.\n   *\n   * @param control - A control pattern to parse.\n   *\n   * @return A `dest` index.\n   */\n  function parse( control: number | string ): number {\n    let index = currIndex;\n\n    if ( isString( control ) ) {\n      const [ , indicator, number ] = control.match( /([+\\-<>])(\\d+)?/ ) || [];\n\n      if ( indicator === '+' || indicator === '-' ) {\n        index = computeDestIndex( currIndex + +`${ indicator }${ +number || 1 }`, currIndex, true );\n      } else if ( indicator === '>' ) {\n        index = number ? toIndex( +number ) : getNext( true );\n      } else if ( indicator === '<' ) {\n        index = getPrev( true );\n      }\n    } else {\n      index = isLoop ? control : clamp( control, 0, getEnd() );\n    }\n\n    return index;\n  }\n\n  /**\n   * Returns a next destination index.\n   *\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\n   *\n   * @return A next index if available, or otherwise `-1`.\n   */\n  function getNext( destination?: boolean ): number {\n    return getAdjacent( false, destination );\n  }\n\n  /**\n   * Returns a previous destination index.\n   *\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\n   *\n   * @return A previous index if available, or otherwise `-1`.\n   */\n  function getPrev( destination?: boolean ): number {\n    return getAdjacent( true, destination );\n  }\n\n  /**\n   * Returns an adjacent destination index.\n   *\n   * @internal\n   *\n   * @param prev        - Determines whether to return a previous or next index.\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\n   *\n   * @return An adjacent index if available, or otherwise `-1`.\n   */\n  function getAdjacent( prev: boolean, destination?: boolean ): number {\n    const number = perMove || ( hasFocus() ? 1 : perPage );\n    const dest   = computeDestIndex( currIndex + number * ( prev ? -1 : 1 ), currIndex );\n\n    if ( dest === -1 && isSlide ) {\n      if ( ! approximatelyEqual( getPosition(), getLimit( ! prev ), 1 ) ) {\n        return prev ? 0 : getEnd();\n      }\n    }\n\n    return destination ? dest : loop( dest );\n  }\n\n  /**\n   * Converts the desired destination index to the valid one.\n   * - This may return clone indices if the editor is the loop mode,\n   *   or `-1` if there is no slide to go.\n   * - There are still slides where the slider can go if borders are between `from` and `dest`.\n   *\n   * @param dest        - The desired destination.\n   * @param from        - A base index.\n   * @param incremental - Optional. Whether the control is incremental or not.\n   *\n   * @return A converted destination index, including clones.\n   */\n  function computeDestIndex( dest: number, from: number, incremental?: boolean ): number {\n    if ( isEnough() ) {\n      const end = getEnd();\n      // Will overrun:\n      if ( dest < 0 || dest > end ) {\n        if ( !forcePerMove && ( between( 0, dest, from, true ) || between( end, from, dest, true ) ) ) {\n          dest = toIndex( toPage( dest ) );\n        } else {\n          if ( isLoop ) {\n            dest = perMove || hasFocus()\n              ? dest\n              : dest < 0 ? - ( slideCount % perPage || perPage ) : slideCount;\n          } else if ( options.rewind ) {\n            dest = dest < 0 ? end : 0;\n          } else {\n            dest = -1;\n          }\n        }\n      } else {\n        if ( ! incremental && dest !== from ) {\n          dest = perMove ? dest : toIndex( toPage( from ) + ( dest < from ? -1 : 1 ) );\n        }\n      }\n    } else {\n      dest = -1;\n    }\n\n    return dest;\n  }\n\n  /**\n   * Returns the end index where the slider can go.\n   * For example, if the slider has 10 slides and the `perPage` option is 3,\n   * the slider can go to the slide 8 (the index is 7).\n   *\n   * @return An end index.\n   */\n  function getEnd(): number {\n    let end = slideCount - perPage;\n\n    if ( hasFocus() || ( isLoop && perMove ) ) {\n      end = slideCount - 1;\n    }\n\n    return max( end, 0 );\n  }\n\n  /**\n   * Loops the provided index only in the loop mode.\n   *\n   * @param index - An index to loop.\n   *\n   * @return A looped index.\n   */\n  function loop( index: number ): number {\n    if ( isLoop ) {\n      return isEnough() ? index % slideCount + ( index < 0 ? slideCount : 0 ) : -1;\n    }\n\n    return index;\n  }\n\n  /**\n   * Converts the page index to the slide index.\n   *\n   * @param page - A page index to convert.\n   *\n   * @return A slide index.\n   */\n  function toIndex( page: number ): number {\n    return clamp( hasFocus() ? page : perPage * page, 0, getEnd() );\n  }\n\n  /**\n   * Converts the slide index to the page index.\n   *\n   * @param index - An index to convert.\n   */\n  function toPage( index: number ): number {\n    if ( ! hasFocus() ) {\n      index = between( index, slideCount - perPage, slideCount - 1 ) ? slideCount - 1 : index;\n      index = floor( index / perPage );\n    }\n\n    return index;\n  }\n\n  /**\n   * Converts the destination position to the dest index.\n   *\n   * @param destination - A position to convert.\n   *\n   * @return A dest index.\n   */\n  function toDest( destination: number ): number {\n    const closest = Move.toIndex( destination );\n    return isSlide ? clamp( closest, 0, getEnd() ) : closest;\n  }\n\n  /**\n   * Sets a new index and retains old one.\n   *\n   * @param index - A new index to set.\n   */\n  function setIndex( index: number ): void {\n    if ( index !== currIndex ) {\n      prevIndex = currIndex;\n      currIndex = index;\n    }\n  }\n\n  /**\n   * Returns the current/previous index.\n   *\n   * @param prev - Optional. Whether to return previous index or not.\n   */\n  function getIndex( prev?: boolean ): number {\n    return prev ? prevIndex : currIndex;\n  }\n\n  /**\n   * Verifies if the focus option is available or not.\n   *\n   * @return `true` if the slider has the focus option.\n   */\n  function hasFocus(): boolean {\n    return ! isUndefined( options.focus ) || options.isNavigation;\n  }\n\n  return {\n    mount,\n    go,\n    scroll,\n    getNext,\n    getPrev,\n    getAdjacent,\n    getEnd,\n    setIndex,\n    getIndex,\n    toIndex,\n    toPage,\n    toDest,\n    hasFocus,\n  };\n}\n","import { abs } from '../math/math';\n\n\n/**\n * Checks if the provided 2 numbers are approximately equal or not.\n *\n * @param x       - A number.\n * @param y       - Another number to compare.\n * @param epsilon - An accuracy that defines the approximation.\n *\n * @return `true` if 2 numbers are considered to be equal, or otherwise `false`.\n */\nexport function approximatelyEqual( x: number, y: number, epsilon: number ): boolean {\n  return abs( x - y ) < epsilon;\n}\n","import { ALL_ATTRIBUTES, ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\nimport {\n  EVENT_ARROWS_MOUNTED,\n  EVENT_ARROWS_UPDATED,\n  EVENT_MOUNTED,\n  EVENT_MOVED,\n  EVENT_REFRESH,\n  EVENT_SCROLLED,\n  EVENT_UPDATED,\n} from '../../constants/events';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport {\n  append,\n  apply,\n  before,\n  child,\n  create,\n  display,\n  parseHtml,\n  remove,\n  removeAttribute,\n  setAttribute,\n} from '../../utils';\nimport { PATH, SIZE, XML_NAME_SPACE } from './path';\n\n\n/**\n * The interface for the Arrows component.\n *\n * @since 3.0.0\n */\nexport interface ArrowsComponent extends BaseComponent {\n  arrows: { prev?: HTMLButtonElement, next?: HTMLButtonElement };\n}\n\n/**\n * The component for handling previous and next arrows.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An Arrows component object.\n */\nexport function Arrows( Splide: Splide, Components: Components, options: Options ): ArrowsComponent {\n  const { on, bind, emit } = EventInterface( Splide );\n  const { classes, i18n } = options;\n  const { Elements, Controller } = Components;\n\n  /**\n   * The wrapper element.\n   */\n  let wrapper = Elements.arrows;\n\n  /**\n   * The previous arrow element.\n   */\n  let prev = Elements.prev;\n\n  /**\n   * The next arrow element.\n   */\n  let next = Elements.next;\n\n  /**\n   * Indicates whether the component creates arrows or retrieved from the DOM.\n   */\n  let created: boolean;\n\n  /**\n   * An object with previous and next arrows.\n   */\n  const arrows: ArrowsComponent[ 'arrows' ] = {};\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n    on( EVENT_UPDATED, init );\n  }\n\n  /**\n   * Initializes the component.\n   */\n  function init(): void {\n    if ( options.arrows ) {\n      if ( ! prev || ! next ) {\n        createArrows();\n      }\n    }\n\n    if ( prev && next ) {\n      if ( ! arrows.prev ) {\n        setAttribute( [ prev, next ], ARIA_CONTROLS, Elements.list.id );\n\n        arrows.prev = prev;\n        arrows.next = next;\n\n        listen();\n\n        emit( EVENT_ARROWS_MOUNTED, prev, next );\n      }\n\n      display( wrapper, options.arrows === false ? 'none' : '' );\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    if ( created ) {\n      remove( wrapper );\n    } else {\n      removeAttribute( [ prev, next ], ALL_ATTRIBUTES );\n    }\n  }\n\n  /**\n   * Listens to some events.\n   */\n  function listen(): void {\n    const { go } = Controller;\n    on( [ EVENT_MOUNTED, EVENT_MOVED, EVENT_UPDATED, EVENT_REFRESH, EVENT_SCROLLED ], update );\n    bind( next, 'click', apply( go, '>', true, undefined ) );\n    bind( prev, 'click', apply( go, '<', true, undefined ) );\n  }\n\n  /**\n   * Create arrows and append them to the slider.\n   */\n  function createArrows(): void {\n    wrapper = create( 'div', classes.arrows );\n    prev    = createArrow( true );\n    next    = createArrow( false );\n    created = true;\n\n    append( wrapper, [ prev, next ] );\n    before( wrapper, child( options.arrows === 'slider' && Elements.slider || Splide.root ) );\n  }\n\n  /**\n   * Creates an arrow button.\n   *\n   * @param prev - Determines whether to create a previous or next arrow.\n   *\n   * @return A created button element.\n   */\n  function createArrow( prev: boolean ): HTMLButtonElement {\n    const arrow = `<button class=\"${ classes.arrow } ${ prev ? classes.prev : classes.next }\" type=\"button\">`\n      +\t`<svg xmlns=\"${ XML_NAME_SPACE }\" viewBox=\"0 0 ${ SIZE } ${ SIZE }\" width=\"${ SIZE }\" height=\"${ SIZE }\">`\n      + `<path d=\"${ options.arrowPath || PATH }\" />`;\n\n    return parseHtml<HTMLButtonElement>( arrow );\n  }\n\n  /**\n   * Updates status of arrows, such as `disabled` and `aria-label`.\n   */\n  function update(): void {\n    const index     = Splide.index;\n    const prevIndex = Controller.getPrev();\n    const nextIndex = Controller.getNext();\n    const prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\n    const nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\n\n    prev.disabled = prevIndex < 0;\n    next.disabled = nextIndex < 0;\n\n    setAttribute( prev, ARIA_LABEL, prevLabel );\n    setAttribute( next, ARIA_LABEL, nextLabel );\n\n    emit( EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex );\n  }\n\n  return {\n    arrows,\n    mount,\n    destroy,\n  };\n}\n","/**\n * The namespace for SVG elements.\n */\nexport const XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\n\n/**\n * The arrow path.\n */\nexport const PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\n\n/**\n * SVG width and height.\n */\nexport const SIZE = 40;\n","import { ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\nimport {\n  EVENT_AUTOPLAY_PAUSE,\n  EVENT_AUTOPLAY_PLAY,\n  EVENT_AUTOPLAY_PLAYING,\n  EVENT_MOVE,\n  EVENT_REFRESH,\n  EVENT_SCROLL,\n} from '../../constants/events';\nimport { EventInterface, RequestInterval } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { getAttribute, setAttribute, style } from '../../utils';\nimport { INTERVAL_DATA_ATTRIBUTE } from './constants';\n\n\n/**\n * The interface for the Autoplay component.\n *\n * @since 3.0.0\n */\nexport interface AutoplayComponent extends BaseComponent {\n  play(): void;\n  pause(): void;\n  isPaused(): boolean;\n}\n\n/**\n * The component for auto playing sliders.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An Autoplay component object.\n */\nexport function Autoplay( Splide: Splide, Components: Components, options: Options ): AutoplayComponent {\n  const { on, bind, emit } = EventInterface( Splide );\n  const interval = RequestInterval( options.interval, Splide.go.bind( Splide, '>' ), update );\n  const { isPaused } = interval;\n  const { Elements } = Components;\n\n  /**\n   * Indicates whether the slider is hovered or not.\n   */\n  let hovered: boolean;\n\n  /**\n   * Indicates whether one of slider elements has focus or not.\n   */\n  let focused: boolean;\n\n  /**\n   * Turns into `true` when autoplay is manually paused.\n   */\n  let paused: boolean;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    const { autoplay } = options;\n\n    if ( autoplay ) {\n      initButton( true );\n      initButton( false );\n      listen();\n\n      if ( autoplay !== 'pause' ) {\n        play();\n      }\n    }\n  }\n\n  /**\n   * Initializes a play/pause button.\n   *\n   * @param forPause - Determines whether to initialize a pause or play button.\n   */\n  function initButton( forPause: boolean ): void {\n    const prop   = forPause ? 'pause' : 'play';\n    const button = Elements[ prop ];\n\n    if ( button ) {\n      setAttribute( button, ARIA_CONTROLS, Elements.track.id );\n      setAttribute( button, ARIA_LABEL, options.i18n[ prop ] );\n\n      bind( button, 'click', forPause ? pause : play );\n    }\n  }\n\n  /**\n   * Listens to some events.\n   */\n  function listen(): void {\n    const { root } = Elements;\n\n    if ( options.pauseOnHover ) {\n      bind( root, 'mouseenter mouseleave', e => {\n        hovered = e.type === 'mouseenter';\n        autoToggle();\n      } );\n    }\n\n    if ( options.pauseOnFocus ) {\n      bind( root, 'focusin focusout', e => {\n        focused = e.type === 'focusin';\n        autoToggle();\n      } );\n    }\n\n    on( [ EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH ], interval.rewind );\n    on( EVENT_MOVE, updateInterval );\n  }\n\n  /**\n   * Starts autoplay and clears all flags.\n   */\n  function play(): void {\n    if ( isPaused() && Components.Slides.isEnough() ) {\n      interval.start( ! options.resetProgress );\n      focused = hovered = paused = false;\n      emit( EVENT_AUTOPLAY_PLAY );\n    }\n  }\n\n  /**\n   * Pauses autoplay.\n   *\n   * @param manual - If `true`, autoplay keeps paused until `play()` is explicitly called.\n   */\n  function pause( manual = true ): void {\n    if ( ! isPaused() ) {\n      interval.pause();\n      emit( EVENT_AUTOPLAY_PAUSE );\n    }\n\n    paused = manual;\n  }\n\n  /**\n   * Toggles play/pause according to current flags.\n   * If autoplay is manually paused, this will do nothing.\n   */\n  function autoToggle(): void {\n    if ( ! paused ) {\n      if ( ! hovered && ! focused ) {\n        play();\n      } else {\n        pause( false );\n      }\n    }\n  }\n\n  /**\n   * Called on every animation frame while autoplay is active.\n   *\n   * @param rate - The progress rate between 0 to 1.\n   */\n  function update( rate: number ): void {\n    const { bar } = Elements;\n    bar && style( bar, 'width', `${ rate * 100 }%` );\n    emit( EVENT_AUTOPLAY_PLAYING, rate );\n  }\n\n  /**\n   * Updates or restores the interval duration.\n   */\n  function updateInterval(): void {\n    const Slide = Components.Slides.getAt( Splide.index );\n    interval.set( Slide && +getAttribute( Slide.slide, INTERVAL_DATA_ATTRIBUTE ) || options.interval );\n  }\n\n  return {\n    mount,\n    destroy: interval.cancel,\n    play,\n    pause,\n    isPaused,\n  };\n}\n","import { EVENT_LAZYLOAD_LOADED, EVENT_MOUNTED, EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { apply, child, display } from '../../utils';\nimport { SlideComponent } from '../Slides/Slide';\n\n\n/**\n * The interface for the Cover component.\n *\n * @since 3.0.0\n */\nexport interface CoverComponent extends BaseComponent {\n}\n\n/**\n * The component for setting the image as the slide background.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Cover component object.\n */\nexport function Cover( Splide: Splide, Components: Components, options: Options ): CoverComponent {\n  const { on } = EventInterface( Splide );\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    if ( options.cover ) {\n      on( EVENT_LAZYLOAD_LOADED, apply( toggle, true ) );\n      on( [ EVENT_MOUNTED, EVENT_UPDATED, EVENT_REFRESH ], apply( cover, true ) );\n    }\n  }\n\n  /**\n   * Sets/removes the background image to/from all slides.\n   *\n   * @param cover - If `false`, removes the background image.\n   */\n  function cover( cover: boolean ): void {\n    Components.Slides.forEach( Slide => {\n      const img = child<HTMLImageElement>( Slide.container || Slide.slide, 'img' );\n\n      if ( img && img.src ) {\n        toggle( cover, img, Slide );\n      }\n    } );\n  }\n\n  /**\n   * Sets/removes the background image to/from the parent element.\n   *\n   * @param cover - If `false`, removes the background image.\n   * @param img   - A target image element.\n   * @param Slide - A SlideComponent object where the image belongs.\n   */\n  function toggle( cover: boolean, img: HTMLImageElement, Slide: SlideComponent ): void {\n    Slide.style( 'background', cover ? `center/cover no-repeat url(\"${ img.src }\")` : '', true );\n    display( img, cover ? 'none' : '' );\n  }\n\n  return {\n    mount,\n    destroy: apply( cover, false ),\n  };\n}\n","import { EVENT_MOVE, EVENT_REFRESH, EVENT_SCROLL, EVENT_SCROLLED, EVENT_UPDATED } from '../../constants/events';\nimport { SLIDE } from '../../constants/types';\nimport { EventInterface, RequestInterval, RequestIntervalInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\nimport { abs, between, max } from '../../utils';\nimport { BASE_VELOCITY, BOUNCE_DIFF_THRESHOLD, BOUNCE_DURATION, FRICTION_FACTOR, MIN_DURATION } from './constants';\n\n\n/**\n * The interface for the Scroll component.\n *\n * @since 3.0.0\n */\nexport interface ScrollComponent extends BaseComponent {\n  scroll( position: number, duration?: number, callback?: AnyFunction ): void;\n  cancel(): void;\n}\n\n/**\n * The component for scrolling the slider.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Scroll component object.\n */\nexport function Scroll( Splide: Splide, Components: Components, options: Options ): ScrollComponent {\n  const { on, emit } = EventInterface( Splide );\n  const { Move } = Components;\n  const { getPosition, getLimit, exceededLimit } = Move;\n\n  /**\n   * Retains the active RequestInterval object.\n   */\n  let interval: RequestIntervalInterface;\n\n  /**\n   * Holds the callback function.\n   */\n  let scrollCallback: AnyFunction;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    on( EVENT_MOVE, clear );\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], cancel );\n  }\n\n  /**\n   * Scrolls the slider to the provided destination.\n   *\n   * @param destination        - The destination to scroll to.\n   * @param duration           - Optional. The scroll duration. If omitted, calculates it by the distance.\n   * @param callback           - Optional. A callback invoked after scroll ends.\n   * @param suppressConstraint - Optional. Whether to suppress constraint process when the slider exceeds bounds.\n   */\n  function scroll(\n    destination: number,\n    duration?: number,\n    callback?: AnyFunction,\n    suppressConstraint?: boolean\n  ): void {\n    const start = getPosition();\n    let friction = 1;\n\n    duration       = duration || computeDuration( abs( destination - start ) );\n    scrollCallback = callback;\n    clear();\n\n    interval = RequestInterval( duration, onScrolled, rate => {\n      const position = getPosition();\n      const target   = start + ( destination - start ) * easing( rate );\n      const diff     = ( target - getPosition() ) * friction;\n\n      Move.translate( position + diff );\n\n      if ( Splide.is( SLIDE ) && ! suppressConstraint && exceededLimit() ) {\n        friction *= FRICTION_FACTOR;\n\n        if ( abs( diff ) < BOUNCE_DIFF_THRESHOLD ) {\n          bounce( exceededLimit( false ) );\n        }\n      }\n    }, 1 );\n\n    emit( EVENT_SCROLL );\n    interval.start();\n  }\n\n  /**\n   * Triggers the bounce effect when the slider reaches bounds.\n   *\n   * @param backwards - The direction the slider is going towards.\n   */\n  function bounce( backwards: boolean ): void {\n    scroll( getLimit( ! backwards ), BOUNCE_DURATION, null, true );\n  }\n\n  /**\n   * Called when scroll ends or has been just canceled.\n   */\n  function onScrolled(): void {\n    const position = getPosition();\n    const index = Move.toIndex( position );\n\n    if ( ! between( index, 0, Splide.length - 1 ) ) {\n      Move.translate( Move.shift( position, index > 0 ), true );\n    }\n\n    scrollCallback && scrollCallback();\n    emit( EVENT_SCROLLED );\n  }\n\n  /**\n   * Computes the scroll duration by the distance and the base velocity.\n   *\n   * @param distance - Distance in pixel.\n   *\n   * @return The duration for scroll.\n   */\n  function computeDuration( distance: number ): number {\n    return max( distance / BASE_VELOCITY, MIN_DURATION );\n  }\n\n  /**\n   * Clears the active interval.\n   */\n  function clear(): void {\n    if ( interval ) {\n      interval.cancel();\n    }\n  }\n\n  /**\n   * Cancels the active interval and emits the `scrolled` event.\n   */\n  function cancel(): void {\n    if ( interval && ! interval.isPaused() ) {\n      clear();\n      onScrolled();\n    }\n  }\n\n  /**\n   * The easing function.\n   *\n   * @param t - A value to ease.\n   *\n   * @return An eased value.\n   */\n  function easing( t: number ): number {\n    const { easingFunc } = options;\n    return easingFunc ? easingFunc( t ) : 1 - Math.pow( 1 - t, 4 );\n  }\n\n  return {\n    mount,\n    destroy: clear,\n    scroll,\n    cancel,\n  };\n}\n","/**\n * Triggers the bounce effect when the diff becomes less than this value.\n *\n * @since 3.0.0\n */\nexport const BOUNCE_DIFF_THRESHOLD = 10;\n\n/**\n * The duration of the bounce effect.\n *\n * @since 3.0.0\n */\nexport const BOUNCE_DURATION = 600;\n\n/**\n * The friction factor.\n *\n * @since 3.0.0\n */\nexport const FRICTION_FACTOR = 0.6;\n\n/**\n * The velocity to calculate the scroll duration.\n *\n * @since 3.0.0\n */\nexport const BASE_VELOCITY = 1.5;\n\n/**\n * The minimum duration of scroll.\n *\n * @since 3.0.0\n */\nexport const MIN_DURATION = 800;\n","import { EVENT_DRAG, EVENT_DRAGGED, EVENT_DRAGGING, EVENT_MOUNTED, EVENT_UPDATED } from '../../constants/events';\nimport { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\nimport { DRAGGING, IDLE, MOVING } from '../../constants/states';\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { abs, isObject, matches, min, noop, prevent, sign } from '../../utils';\nimport { FRICTION, LOG_INTERVAL, POINTER_DOWN_EVENTS, POINTER_MOVE_EVENTS, POINTER_UP_EVENTS } from './constants';\n\n\n/**\n * The interface for the Drag component.\n *\n * @since 3.0.0\n */\nexport interface DragComponent extends BaseComponent {\n  disable( disabled: boolean ): void;\n  isDragging(): boolean;\n}\n\n/**\n * The component for dragging the slider.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Drag component object.\n */\nexport function Drag( Splide: Splide, Components: Components, options: Options ): DragComponent {\n  const { on, emit, bind, unbind } = EventInterface( Splide );\n  const { state } = Splide;\n  const { Move, Scroll, Controller } = Components;\n  const { track } = Components.Elements;\n  const { resolve, orient } = Components.Direction;\n  const { getPosition, exceededLimit } = Move;\n\n  /**\n   * The base slider position to calculate the delta of coords.\n   */\n  let basePosition: number;\n\n  /**\n   * The base event object saved per specific sampling interval.\n   */\n  let baseEvent: TouchEvent | MouseEvent;\n\n  /**\n   * Holds the previous base event object.\n   */\n  let prevBaseEvent: TouchEvent | MouseEvent;\n\n  /**\n   * Indicates whether the drag mode is `free` or not.\n   */\n  let isFree: boolean;\n\n  /**\n   * Indicates whether the user is dragging the slider or not.\n   */\n  let dragging: boolean;\n\n  /**\n   * Indicates whether the slider exceeds limits or not.\n   * This must not be `undefined` for strict comparison.\n   */\n  let exceeded = false;\n\n  /**\n   * Turns into `true` when the user starts dragging the slider.\n   */\n  let clickPrevented: boolean;\n\n  /**\n   * Indicates whether the drag component is now disabled or not.\n   */\n  let disabled: boolean;\n\n  /**\n   * The target element to attach listeners.\n   */\n  let target: Window | HTMLElement;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    bind( track, POINTER_MOVE_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\n    bind( track, POINTER_UP_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\n    bind( track, POINTER_DOWN_EVENTS, onPointerDown, SCROLL_LISTENER_OPTIONS );\n    bind( track, 'click', onClick, { capture: true } );\n    bind( track, 'dragstart', prevent );\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], init );\n  }\n\n  /**\n   * Initializes the component.\n   */\n  function init(): void {\n    const { drag } = options;\n    disable( ! drag );\n    isFree = drag === 'free';\n  }\n\n  /**\n   * Called when the user clicks or touches the slider.\n   * - Needs to prevent the default behaviour when the slider is busy to deny any action, such as dragging images\n   * - IE does not support MouseEvent and TouchEvent constructors\n   * - The `dragging` state always becomes `true` when the user starts dragging while the slider is moving\n   *\n   * @param e - A TouchEvent or MouseEvent object\n   */\n  function onPointerDown( e: TouchEvent | MouseEvent ): void {\n    clickPrevented = false;\n\n    if ( ! disabled ) {\n      const { noDrag } = options;\n      const isTouch     = isTouchEvent( e );\n      const isDraggable = ! noDrag || ! matches( e.target, noDrag );\n\n      if ( isDraggable && ( isTouch || ! e.button ) ) {\n        if ( ! Move.isBusy() ) {\n          target        = isTouch ? track : window;\n          dragging      = state.is( MOVING );\n          prevBaseEvent = null;\n\n          bind( target, POINTER_MOVE_EVENTS, onPointerMove, SCROLL_LISTENER_OPTIONS );\n          bind( target, POINTER_UP_EVENTS, onPointerUp, SCROLL_LISTENER_OPTIONS );\n          Move.cancel();\n          Scroll.cancel();\n          save( e );\n        } else {\n          prevent( e, true );\n        }\n      }\n    }\n  }\n\n  /**\n   * Called while the user moves the pointer on the slider.\n   *\n   * @param e - A TouchEvent or MouseEvent object\n   */\n  function onPointerMove( e: TouchEvent | MouseEvent ): void {\n    if ( ! state.is( DRAGGING ) ) {\n      state.set( DRAGGING );\n      emit( EVENT_DRAG );\n    }\n\n    if ( e.cancelable ) {\n      if ( dragging ) {\n        Move.translate( basePosition + constrain( diffCoord( e ) ) );\n\n        const expired     = diffTime( e ) > LOG_INTERVAL;\n        const hasExceeded = exceeded !== ( exceeded = exceededLimit() );\n\n        if ( expired || hasExceeded ) {\n          save( e );\n        }\n\n        clickPrevented = true;\n        emit( EVENT_DRAGGING );\n        prevent( e );\n      } else if ( isSliderDirection( e ) ) {\n        dragging = shouldStart( e );\n        prevent( e );\n      }\n    }\n  }\n\n  /**\n   * Called when the user releases pointing devices.\n   * Needs to move the slider when:\n   * - The user drags the slider and the distance exceeds the threshold\n   * - The user aborted the slider moving by pointerdown and just released it without dragging the slider\n   *\n   * @param e - A TouchEvent or MouseEvent object\n   */\n  function onPointerUp( e: TouchEvent | MouseEvent ): void {\n    if ( state.is( DRAGGING ) ) {\n      state.set( IDLE );\n      emit( EVENT_DRAGGED );\n    }\n\n    if ( dragging ) {\n      move( e );\n      prevent( e );\n    }\n\n    unbind( target, POINTER_MOVE_EVENTS, onPointerMove );\n    unbind( target, POINTER_UP_EVENTS, onPointerUp );\n    dragging = false;\n  }\n\n  /**\n   * Called when the track element is clicked.\n   * Disables click any elements inside it while dragging.\n   *\n   * @param e - A MouseEvent object.\n   */\n  function onClick( e: MouseEvent ): void {\n    if ( ! disabled && clickPrevented ) {\n      prevent( e, true );\n    }\n  }\n\n  /**\n   * Saves data at the specific moment.\n   *\n   * @param e - A TouchEvent or MouseEvent object.\n   */\n  function save( e: TouchEvent | MouseEvent ): void {\n    prevBaseEvent = baseEvent;\n    baseEvent     = e;\n    basePosition  = getPosition();\n  }\n\n  /**\n   * Moves the slider according to the drag result.\n   *\n   * @param e - A TouchEvent or MouseEvent object.\n   */\n  function move( e: TouchEvent | MouseEvent ): void {\n    const velocity    = computeVelocity( e );\n    const destination = computeDestination( velocity );\n    const rewind      = options.rewind && options.rewindByDrag;\n\n    if ( isFree ) {\n      Controller.scroll( destination );\n    } else if ( Splide.is( FADE ) ) {\n      Controller.go( orient( sign( velocity ) ) < 0 ? ( rewind ? '<' : '-' ) : ( rewind ? '>' : '+' ) );\n    } else if ( Splide.is( SLIDE ) && exceeded && rewind ) {\n      Controller.go( exceededLimit( true ) ? '>' : '<' );\n    } else {\n      Controller.go( Controller.toDest( destination ), true );\n    }\n  }\n\n  /**\n   * Checks if the drag distance exceeds the defined threshold.\n   *\n   * @param e - A TouchEvent or MouseEvent object.\n   *\n   * @return `true` if the distance exceeds the threshold, or `false` if not.\n   */\n  function shouldStart( e: TouchEvent | MouseEvent ): boolean {\n    const { dragMinThreshold: thresholds } = options;\n    const isObj = isObject( thresholds );\n    const mouse = isObj && thresholds.mouse || 0;\n    const touch = ( isObj ? thresholds.touch : +thresholds ) || 10;\n    return abs( diffCoord( e ) ) > ( isTouchEvent( e ) ? touch : mouse );\n  }\n\n  /**\n   * Checks whether dragging towards the slider or the scroll direction.\n   *\n   * @return `true` if dragging towards the slider direction, or otherwise `false`.\n   *\n   * @param e - A TouchEvent or MouseEvent object\n   */\n  function isSliderDirection( e: TouchEvent | MouseEvent ): boolean {\n    return abs( diffCoord( e ) ) > abs( diffCoord( e, true ) );\n  }\n\n  /**\n   * Computes the drag velocity.\n   *\n   * @param e - A TouchEvent or MouseEvent object\n   *\n   * @return The drag velocity.\n   */\n  function computeVelocity( e: TouchEvent | MouseEvent ): number {\n    if ( Splide.is( LOOP ) || ! exceeded ) {\n      const time = diffTime( e );\n\n      if ( time && time < LOG_INTERVAL ) {\n        return diffCoord( e ) / time;\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Computes the destination by the velocity and the `flickPower` option.\n   *\n   * @param velocity - The drag velocity.\n   *\n   * @return The destination.\n   */\n  function computeDestination( velocity: number ): number {\n    return getPosition() + sign( velocity ) * min(\n      abs( velocity ) * ( options.flickPower || 600 ),\n      isFree ? Infinity : Components.Layout.listSize() * ( options.flickMaxPages || 1 )\n    );\n  }\n\n  /**\n   * Returns the coord difference between the provided and base events.\n   *\n   * @param e          - A TouchEvent or MouseEvent object.\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\n   *\n   * @return The difference of the coord.\n   */\n  function diffCoord( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\n    return coordOf( e, orthogonal ) - coordOf( getBaseEvent( e ), orthogonal );\n  }\n\n  /**\n   * Returns the elapsed time from the base event to `e`.\n   *\n   * @param e - A TouchEvent or MouseEvent object.\n   *\n   * @return The elapsed time in milliseconds.\n   */\n  function diffTime( e: TouchEvent | MouseEvent ): number {\n    return e.timeStamp - getBaseEvent( e ).timeStamp;\n  }\n\n  /**\n   * Returns the base event.\n   * If the base event is same with `e`, returns previous one.\n   *\n   * @param e - A TouchEvent or MouseEvent object.\n   *\n   * @return A base event.\n   */\n  function getBaseEvent( e: TouchEvent | MouseEvent ): TouchEvent | MouseEvent {\n    return baseEvent === e && prevBaseEvent || baseEvent;\n  }\n\n  /**\n   * Returns the `pageX` and `pageY` coordinates provided by the event.\n   * Be aware that IE does not support both TouchEvent and MouseEvent constructors.\n   *\n   * @param e          - A TouchEvent or MouseEvent object.\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\n   *\n   * @return A pageX or pageY coordinate.\n   */\n  function coordOf( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\n    return ( isTouchEvent( e ) ? e.changedTouches[ 0 ] : e )[ `page${ resolve( orthogonal ? 'Y' : 'X' ) }` ];\n  }\n\n  /**\n   * Reduces the distance to move by the predefined friction.\n   * This does nothing when the slider type is not `slide`, or the position is inside borders.\n   *\n   * @param diff - Diff to constrain.\n   *\n   * @return The constrained diff.\n   */\n  function constrain( diff: number ): number {\n    return diff / ( exceeded && Splide.is( SLIDE ) ? FRICTION : 1 );\n  }\n\n  /**\n   * Checks if the provided event is TouchEvent or MouseEvent.\n   *\n   * @param e - An event to check.\n   *\n   * @return `true` if the `e` is TouchEvent.\n   */\n  function isTouchEvent( e: TouchEvent | MouseEvent ): e is TouchEvent {\n    return typeof TouchEvent !== 'undefined' && e instanceof TouchEvent;\n  }\n\n  /**\n   * Checks if now the user is dragging the slider or not.\n   *\n   * @return `true` if the user is dragging the slider or otherwise `false`.\n   */\n  function isDragging(): boolean {\n    return dragging;\n  }\n\n  /**\n   * Disables the component.\n   *\n   * @param value - Set `true` to disable the component.\n   */\n  function disable( value: boolean ): void {\n    disabled = value;\n  }\n\n  return {\n    mount,\n    disable,\n    isDragging,\n  };\n}\n","import { ROLE } from '../../constants/attributes';\nimport { CLASS_LOADING } from '../../constants/classes';\nimport {\n  EVENT_LAZYLOAD_LOADED,\n  EVENT_MOUNTED,\n  EVENT_MOVED,\n  EVENT_REFRESH,\n  EVENT_RESIZE,\n  EVENT_SCROLLED,\n} from '../../constants/events';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport {\n  addClass,\n  child,\n  create,\n  display,\n  getAttribute,\n  queryAll,\n  remove,\n  removeAttribute,\n  removeClass,\n  setAttribute,\n} from '../../utils';\nimport { SlideComponent } from '../Slides/Slide';\nimport { IMAGE_SELECTOR, SRC_DATA_ATTRIBUTE, SRCSET_DATA_ATTRIBUTE } from './constants';\n\n\n/**\n * The interface for the LazyLoad component.\n *\n * @since 3.0.0\n */\nexport interface LazyLoadComponent extends BaseComponent {\n}\n\n/**\n * The interface for all components.\n *\n * @since 3.0.0\n */\nexport interface LazyLoadImagesData {\n  _img: HTMLImageElement;\n  _spinner: HTMLSpanElement;\n  _Slide: SlideComponent;\n  src: string | null;\n  srcset: string | null;\n}\n\n/**\n * The component for lazily loading images.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return An LazyLoad component object.\n */\nexport function LazyLoad( Splide: Splide, Components: Components, options: Options ): LazyLoadComponent {\n  const { on, off, bind, emit } = EventInterface( Splide );\n  const isSequential = options.lazyLoad === 'sequential';\n\n  /**\n   * Stores data of images.\n   */\n  let images: LazyLoadImagesData[] = [];\n\n  /**\n   * The current index of images.\n   */\n  let index = 0;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    if ( options.lazyLoad ) {\n      init();\n      on( EVENT_REFRESH, destroy );\n      on( EVENT_REFRESH, init );\n\n      if ( ! isSequential ) {\n        on( [ EVENT_MOUNTED, EVENT_REFRESH, EVENT_MOVED, EVENT_SCROLLED ], observe );\n      }\n    }\n  }\n\n  /**\n   * Finds images that contain specific data attributes.\n   */\n  function init() {\n    Components.Slides.forEach( _Slide => {\n      queryAll<HTMLImageElement>( _Slide.slide, IMAGE_SELECTOR ).forEach( _img => {\n        const src    = getAttribute( _img, SRC_DATA_ATTRIBUTE );\n        const srcset = getAttribute( _img, SRCSET_DATA_ATTRIBUTE );\n\n        if ( src !== _img.src || srcset !== _img.srcset ) {\n          const className = options.classes.spinner;\n          const parent    = _img.parentElement;\n          const _spinner  = child( parent, `.${ className }` ) || create( 'span', className, parent );\n\n          setAttribute( _spinner, ROLE, 'presentation' );\n          images.push( { _img, _Slide, src, srcset, _spinner } );\n          ! _img.src && display( _img, 'none' );\n        }\n      } );\n    } );\n\n    if ( isSequential ) {\n      loadNext();\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy() {\n    index  = 0;\n    images = [];\n  }\n\n  /**\n   * Checks how close each image is from the active slide, and determines whether to start loading or not.\n   * The last `+1` is for the current page.\n   */\n  function observe(): void {\n    images = images.filter( data => {\n      const distance = options.perPage * ( ( options.preloadPages || 1 ) + 1 ) - 1;\n\n      if ( data._Slide.isWithin( Splide.index, distance ) ) {\n        return load( data );\n      }\n\n      return true;\n    } );\n\n    if ( ! images.length ) {\n      off( EVENT_MOVED );\n    }\n  }\n\n  /**\n   * Starts loading the image in the data.\n   *\n   * @param data - A LazyLoadImagesData object.\n   */\n  function load( data: LazyLoadImagesData ): void {\n    const { _img } = data;\n\n    addClass( data._Slide.slide, CLASS_LOADING );\n    bind( _img, 'load error', e => { onLoad( data, e.type === 'error' ) } );\n\n    [ 'srcset', 'src' ].forEach( name => {\n      if ( data[ name ] ) {\n        setAttribute( _img, name, data[ name ] );\n        removeAttribute( _img, name === 'src' ? SRC_DATA_ATTRIBUTE : SRCSET_DATA_ATTRIBUTE );\n      }\n    } );\n  }\n\n  /**\n   * Called when the image is loaded or any error occurs.\n   *\n   * @param data  - A LazyLoadImagesData object.\n   * @param error - `true` if this method is called on error.\n   */\n  function onLoad( data: LazyLoadImagesData, error: boolean ): void {\n    const { _Slide } = data;\n\n    removeClass( _Slide.slide, CLASS_LOADING );\n\n    if ( ! error ) {\n      remove( data._spinner );\n      display( data._img, '' );\n      emit( EVENT_LAZYLOAD_LOADED, data._img, _Slide );\n      emit( EVENT_RESIZE );\n    }\n\n    if ( isSequential ) {\n      loadNext();\n    }\n  }\n\n  /**\n   * Starts loading a next image.\n   */\n  function loadNext(): void {\n    if ( index < images.length ) {\n      load( images[ index++ ] );\n    }\n  }\n\n  return {\n    mount,\n    destroy,\n  };\n}\n","import { ARIA_CONTROLS, ARIA_CURRENT, ARIA_LABEL } from '../../constants/attributes';\nimport { CLASS_ACTIVE } from '../../constants/classes';\nimport {\n  EVENT_MOVE,\n  EVENT_PAGINATION_MOUNTED,\n  EVENT_PAGINATION_UPDATED,\n  EVENT_REFRESH,\n  EVENT_SCROLLED,\n  EVENT_UPDATED,\n} from '../../constants/events';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport {\n  addClass, apply,\n  ceil,\n  create,\n  empty,\n  focus,\n  format,\n  remove,\n  removeAttribute,\n  removeClass,\n  setAttribute,\n} from '../../utils';\n\n\n/**\n * The interface for the Pagination component.\n *\n * @since 3.0.0\n */\nexport interface PaginationComponent extends BaseComponent {\n  items: PaginationItem[];\n  getAt( index: number ): PaginationItem;\n  update(): void;\n}\n\n/**\n * The interface for data of the pagination.\n *\n * @since 3.0.0\n */\nexport interface PaginationData {\n  list: HTMLUListElement;\n  items: PaginationItem[];\n}\n\n/**\n * The interface for each pagination item.\n *\n * @since 3.0.0\n */\nexport interface PaginationItem {\n  li: HTMLLIElement;\n  button: HTMLButtonElement;\n  page: number;\n}\n\n/**\n * The component for handling previous and next arrows.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Arrows component object.\n */\nexport function Pagination( Splide: Splide, Components: Components, options: Options ): PaginationComponent {\n  const { on, emit, bind, unbind } = EventInterface( Splide );\n  const { Slides, Elements, Controller } = Components;\n  const { hasFocus, getIndex } = Controller;\n\n  /**\n   * Stores all pagination items.\n   */\n  const items: PaginationItem[] = [];\n\n  /**\n   * The pagination element.\n   */\n  let list: HTMLUListElement;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    init();\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\n    on( [ EVENT_MOVE, EVENT_SCROLLED ], update );\n  }\n\n  /**\n   * Initializes the pagination.\n   */\n  function init(): void {\n    destroy();\n\n    if ( options.pagination && Slides.isEnough() ) {\n      createPagination();\n      emit( EVENT_PAGINATION_MOUNTED, { list, items }, getAt( Splide.index ) );\n      update();\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    if ( list ) {\n      remove( list );\n      items.forEach( item => { unbind( item.button, 'click' ) } );\n      empty( items );\n      list = null;\n    }\n  }\n\n  /**\n   * Creates the pagination element and appends it to the slider.\n   */\n  function createPagination(): void {\n    const { length } = Splide;\n    const { classes, i18n, perPage } = options;\n    const parent = options.pagination === 'slider' && Elements.slider || Elements.root;\n    const max    = hasFocus() ? length : ceil( length / perPage );\n\n    list = create( 'ul', classes.pagination, parent );\n\n    for ( let i = 0; i < max; i++ ) {\n      const li     = create( 'li', null, list );\n      const button = create( 'button', { class: classes.page, type: 'button' }, li );\n      const text   = ! hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\n\n      bind( button, 'click', apply( onClick, i ) );\n\n      setAttribute( button, ARIA_CONTROLS, Components.Elements.list.id );\n      setAttribute( button, ARIA_LABEL, format( text, i + 1 ) );\n\n      items.push( { li, button, page: i } );\n    }\n  }\n\n  /**\n   * Called when the user clicks each pagination dot.\n   * Moves the focus to the active slide for accessibility.\n   *\n   * @link https://www.w3.org/WAI/tutorials/carousels/functionality/\n   *\n   * @param page - A clicked page index.\n   */\n  function onClick( page: number ): void {\n    Controller.go( `>${ page }`, true, () => {\n      const Slide = Slides.getAt( Controller.toIndex( page ) );\n      Slide && focus( Slide.slide );\n    } );\n  }\n\n  /**\n   * Returns the pagination item at the specified index.\n   *\n   * @param index - An index.\n   *\n   * @return A pagination item object if available, or otherwise `undefined`.\n   */\n  function getAt( index: number ): PaginationItem | undefined {\n    return items[ Controller.toPage( index ) ];\n  }\n\n  /**\n   * Updates the pagination status.\n   */\n  function update(): void {\n    const prev = getAt( getIndex( true ) );\n    const curr = getAt( getIndex() );\n\n    if ( prev ) {\n      removeClass( prev.button, CLASS_ACTIVE );\n      removeAttribute( prev.button, ARIA_CURRENT );\n    }\n\n    if ( curr ) {\n      addClass( curr.button, CLASS_ACTIVE );\n      setAttribute( curr.button, ARIA_CURRENT, true );\n    }\n\n    emit( EVENT_PAGINATION_UPDATED, { list, items }, prev, curr );\n  }\n\n  return {\n    items,\n    mount,\n    destroy,\n    getAt,\n    update,\n  };\n}\n","/**\n * Focuses the provided element without scrolling the ascendant element.\n *\n * @param elm - An element to focus.\n */\nexport function focus( elm: HTMLElement ): void {\n  elm[ 'setActive' ] && elm[ 'setActive' ]() || elm.focus( { preventScroll: true } );\n}\n","import { ARIA_ATOMIC, ARIA_LIVE } from '../../constants/attributes';\nimport { EVENT_AUTOPLAY_PAUSE, EVENT_AUTOPLAY_PLAY } from '../../constants/events';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { apply, setAttribute } from '../../utils';\n\n\n/**\n * The interface for the Live component.\n *\n * @since 3.7.0\n */\nexport interface LiveComponent extends BaseComponent {\n  disable( disabled: boolean ): void;\n}\n\n/**\n * The component for implementing Live Region to the slider.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n *\n * @since 3.7.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Live component object.\n */\nexport function Live( Splide: Splide, Components: Components, options: Options ): LiveComponent {\n  const { on } = EventInterface( Splide );\n  const { list } = Components.Elements;\n  const { live } = options;\n\n  /**\n   * Called when the component is mounted.\n   * Explicitly sets `aria-atomic` to avoid SR from reading the content twice.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-atomic\n   */\n  function mount(): void {\n    if ( live ) {\n      setAttribute( list, ARIA_ATOMIC, false );\n      disable( ! Components.Autoplay.isPaused() );\n      on( EVENT_AUTOPLAY_PLAY, apply( disable, true ) );\n      on( EVENT_AUTOPLAY_PAUSE, apply( disable, false ) );\n    }\n  }\n\n  /**\n   * Disables/enables the live region.\n   * Does nothing when the `live` option is not enabled.\n   *\n   * @param disabled - `true` to disable the live region or `false` to enable it again.\n   */\n  function disable( disabled: boolean ): void {\n    if ( live ) {\n      setAttribute( list, ARIA_LIVE, disabled ? 'off' : 'polite' );\n    }\n  }\n\n  return {\n    mount,\n    disable,\n  };\n}","import { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\nimport { MOVING } from '../../constants/states';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { BaseComponent, Components, Options } from '../../types';\nimport { prevent } from '../../utils';\n\n\n/**\n * The interface for the Wheel component.\n *\n * @since 3.0.0\n */\nexport interface WheelComponent extends BaseComponent {\n}\n\n/**\n * The component for observing the mouse wheel and moving the slider.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Wheel component object.\n */\nexport function Wheel( Splide: Splide, Components: Components, options: Options ): WheelComponent {\n  const { bind } = EventInterface( Splide );\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    if ( options.wheel ) {\n      bind( Components.Elements.track, 'wheel', onWheel, SCROLL_LISTENER_OPTIONS );\n    }\n  }\n\n  /**\n   * Called when the user rotates the mouse wheel on the slider.\n   *\n   * @param e - A WheelEvent object.\n   */\n  function onWheel( e: WheelEvent ): void {\n    if ( e.cancelable ) {\n      const { deltaY } = e;\n\n      if ( deltaY ) {\n        const backwards = deltaY < 0;\n        Splide.go( backwards ? '<' : '>' );\n        shouldPrevent( backwards ) && prevent( e );\n      }\n    }\n  }\n\n  /**\n   * Checks whether the component should prevent the default action of the wheel event or not.\n   *\n   * @param backwards - Set this to `true` for backwards direction.\n   *\n   * @return `true` if the action should be prevented.\n   */\n  function shouldPrevent( backwards: boolean ): boolean {\n    return ! options.releaseWheel\n      || Splide.state.is( MOVING )\n      || Components.Controller.getAdjacent( backwards ) !== -1;\n  }\n\n  return {\n    mount,\n  };\n}\n","import { Options } from '../types';\nimport { CLASSES } from './classes';\nimport { I18N } from './i18n';\n\n\n/**\n * The collection of default options.\n * Note that this collection does not contain all options.\n *\n * @since 3.0.0\n */\nexport const DEFAULTS: Options = {\n  type             : 'slide',\n  role             : 'region',\n  speed            : 400,\n  waitForTransition: true,\n  perPage          : 1,\n  forcePerPage     : true,\n  cloneStatus      : true,\n  arrows           : true,\n  pagination       : true,\n  interval         : 5000,\n  pauseOnHover     : true,\n  pauseOnFocus     : true,\n  resetProgress    : true,\n  keyboard         : true,\n  easing           : 'cubic-bezier(0.25, 1, 0.5, 1)',\n  drag             : true,\n  direction        : 'ltr',\n  slideFocus       : true,\n  trimSpace        : true,\n  focusableNodes   : 'a, button, textarea, input, select, iframe',\n  classes          : CLASSES,\n  i18n             : I18N,\n};\n","/**\n * The collection of i18n strings.\n *\n * @since 3.0.0\n */\nexport const I18N = {\n  prev      : 'Previous slide',\n  next      : 'Next slide',\n  first     : 'Go to first slide',\n  last      : 'Go to last slide',\n  slideX    : 'Go to slide %s',\n  pageX     : 'Go to page %s',\n  play      : 'Start autoplay',\n  pause     : 'Pause autoplay',\n  carousel  : 'carousel',\n  slide     : 'slide',\n  slideLabel: '%s of %s', // [ slide number ] / [ slide size ]\n};\n","import { EVENT_MOUNTED, EVENT_REFRESH } from '../../constants/events';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { Components, Options, TransitionComponent } from '../../types';\nimport { nextTick, noop, rect, unit, style } from '../../utils';\n\n\n/**\n * The component for the fade transition.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Transition component object.\n */\nexport function Fade( Splide: Splide, Components: Components, options: Options ): TransitionComponent {\n  const { on } = EventInterface( Splide );\n\n  /**\n   * Called when the component is mounted.\n   * The nextTick disables the initial fade transition of the first slide.\n   */\n  function mount(): void {\n    on( [ EVENT_MOUNTED, EVENT_REFRESH ], () => {\n      nextTick( () => {\n        Components.Slides.style( 'transition', `opacity ${ options.speed }ms ${ options.easing }` );\n      } );\n    } );\n  }\n\n  /**\n   * Starts the transition.\n   * Explicitly sets the track height to avoid it will collapse in Safari.\n   *\n   * @param index - A destination index.\n   * @param done  - The callback function that must be called after the transition ends.\n   */\n  function start( index: number, done: () => void ): void {\n    const { track } = Components.Elements;\n    style( track, 'height', unit( rect( track ).height ) );\n\n    nextTick( () => {\n      done();\n      style( track, 'height', '' );\n    } );\n  }\n\n  return {\n    mount,\n    start,\n    cancel: noop,\n  };\n}\n","import { SLIDE } from '../../constants/types';\nimport { EventInterface } from '../../constructors';\nimport { Splide } from '../../core/Splide/Splide';\nimport { Components, Options, TransitionComponent } from '../../types';\nimport { abs, style } from '../../utils';\n\n\n/**\n * The component for the slide transition.\n *\n * @since 3.0.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Transition component object.\n */\nexport function Slide( Splide: Splide, Components: Components, options: Options ): TransitionComponent {\n  const { bind } = EventInterface( Splide );\n  const { Move, Controller } = Components;\n  const { list } = Components.Elements;\n\n  /**\n   * Holds the `done` callback function.\n   */\n  let endCallback: () => void;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    bind( list, 'transitionend', e => {\n      if ( e.target === list && endCallback ) {\n        cancel();\n        endCallback();\n      }\n    } );\n  }\n\n  /**\n   * Starts the transition.\n   * The Move component calls this method just before the slider moves.\n   *\n   * @param index - A destination index.\n   * @param done  - The callback function that must be called after the transition ends.\n   */\n  function start( index: number, done: () => void ): void {\n    const destination = Move.toPosition( index, true );\n    const position    = Move.getPosition();\n    const speed       = getSpeed( index );\n\n    if ( abs( destination - position ) >= 1 && speed >= 1 ) {\n      apply( `transform ${ speed }ms ${ options.easing }` );\n      Move.translate( destination, true );\n      endCallback = done;\n    } else {\n      Move.jump( index );\n      done();\n    }\n  }\n\n  /**\n   * Cancels the transition.\n   */\n  function cancel(): void {\n    apply( '' );\n  }\n\n  /**\n   * Returns the transition speed.\n   *\n   * @param index - A destination index.\n   */\n  function getSpeed( index: number ): number {\n    const { rewindSpeed } = options;\n\n    if ( Splide.is( SLIDE ) && rewindSpeed ) {\n      const prev = Controller.getIndex( true );\n      const end  = Controller.getEnd();\n\n      if ( ( prev === 0 && index >= end ) || ( prev >= end && index === 0 ) ) {\n        return rewindSpeed;\n      }\n    }\n\n    return options.speed;\n  }\n\n  /**\n   * Applies the transition CSS property to the list element.\n   *\n   * @param transition - A transition CSS value.\n   */\n  function apply( transition: string ): void {\n    style( list, 'transition', transition );\n  }\n\n  return {\n    mount,\n    start,\n    cancel,\n  };\n}\n","import * as ComponentConstructors from '../../components';\nimport { SlideMatcher } from '../../components/Slides/Slides';\nimport { CLASS_INITIALIZED } from '../../constants/classes';\nimport { DEFAULTS } from '../../constants/defaults';\nimport { EVENT_DESTROY, EVENT_MOUNTED, EVENT_READY, EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\nimport { DEFAULT_USER_EVENT_PRIORITY } from '../../constants/priority';\nimport { DATA_ATTRIBUTE } from '../../constants/project';\nimport { CREATED, DESTROYED, IDLE, STATES } from '../../constants/states';\nimport { FADE } from '../../constants/types';\nimport { EventBus, EventBusCallback, EventBusObject, State, StateObject } from '../../constructors';\nimport { Fade, Slide } from '../../transitions';\nimport { ComponentConstructor, Components, EventMap, Options, SyncTarget } from '../../types';\nimport { addClass, assert, assign, empty, forOwn, getAttribute, isString, merge, query, slice } from '../../utils';\n\n\n/**\n * The frontend class for the Splide slider.\n *\n * @since 3.0.0\n */\nexport class Splide {\n  /**\n   * Changes the default options for all Splide instances.\n   */\n  static defaults: Options = {};\n\n  /**\n   * The collection of state numbers.\n   */\n  static readonly STATES = STATES;\n\n  /**\n   * The root element where the Splide is applied.\n   */\n  readonly root: HTMLElement;\n\n  /**\n   * The EventBusObject object.\n   */\n  readonly event: EventBusObject = EventBus();\n\n  /**\n   * The collection of all component objects.\n   */\n  readonly Components: Components = {} as Components;\n\n  /**\n   * The StateObject object.\n   */\n  readonly state: StateObject = State( CREATED );\n\n  /**\n   * An array with SyncTarget objects for splide instances to sync with.\n   */\n  readonly splides: SyncTarget[] = [];\n\n  /**\n   * The collection of options.\n   */\n  private readonly _options: Options = {};\n\n  /**\n   * The collection of all components.\n   */\n  private _Components: Components;\n\n  /**\n   * The collection of extensions.\n   */\n  private _Extensions: Record<string, ComponentConstructor> = {};\n\n  /**\n   * The Transition component.\n   */\n  private _Transition: ComponentConstructor;\n\n  /**\n   * The Splide constructor.\n   *\n   * @param target  - The selector for the target element, or the element itself.\n   * @param options - Optional. An object with options.\n   */\n  constructor( target: string | HTMLElement, options?: Options ) {\n    const root = isString( target ) ? query<HTMLElement>( document, target ) : target;\n    assert( root, `${ root } is invalid.` );\n\n    this.root = root;\n\n    merge( DEFAULTS, Splide.defaults );\n    merge( merge( this._options, DEFAULTS ), options || {} );\n\n    try {\n      merge( this._options, JSON.parse( getAttribute( root, DATA_ATTRIBUTE ) ) );\n    } catch ( e ) {\n      assert( false, e.message );\n    }\n  }\n\n  /**\n   * Initializes the instance.\n   *\n   * @param Extensions - Optional. An object with extensions.\n   * @param Transition - Optional. A Transition component.\n   *\n   * @return `this`\n   */\n  mount( Extensions?: Record<string, ComponentConstructor>, Transition?: ComponentConstructor ): this {\n    const { state, Components } = this;\n    assert( state.is( [ CREATED, DESTROYED ] ), 'Already mounted!' );\n\n    state.set( CREATED );\n\n    this._Components = Components;\n    this._Transition = Transition || this._Transition || ( this.is( FADE ) ? Fade : Slide );\n    this._Extensions = Extensions || this._Extensions;\n\n    const Constructors = assign( {}, ComponentConstructors, this._Extensions, { Transition: this._Transition } );\n\n    forOwn( Constructors, ( Component, key ) => {\n      const component = Component( this, Components, this._options );\n      Components[ key ] = component;\n      component.setup && component.setup();\n    } );\n\n    forOwn( Components, component => {\n      component.mount && component.mount();\n    } );\n\n    this.emit( EVENT_MOUNTED );\n\n    addClass( this.root, CLASS_INITIALIZED );\n\n    state.set( IDLE );\n    this.emit( EVENT_READY );\n\n    return this;\n  }\n\n  /**\n   * Syncs the slider with the provided one.\n   * This method must be called before the `mount()`.\n   *\n   * @example\n   * ```ts\n   * var primary   = new Splide();\n   * var secondary = new Splide();\n   *\n   * primary.sync( secondary );\n   * primary.mount();\n   * secondary.mount();\n   * ```\n   *\n   * @param splide - A Splide instance to sync with.\n   *\n   * @return `this`\n   */\n  sync( splide: Splide ): this {\n    this.splides.push( { splide } );\n    splide.splides.push( { splide: this, isParent: true } );\n\n    if ( this.state.is( IDLE ) ) {\n      this._Components.Sync.remount();\n      splide.Components.Sync.remount();\n    }\n\n    return this;\n  }\n\n  /**\n   * Moves the slider with the following control pattern.\n   *\n   * | Pattern | Description |\n   * |---|---|\n   * | `i` | Goes to the slide `i` |\n   * | `'+${i}'` | Increments the slide index by `i` |\n   * | `'-${i}'` | Decrements the slide index by `i` |\n   * | `'>'` | Goes to the next page |\n   * | `'<'` | Goes to the previous page |\n   * | `>${i}` | Goes to the page `i` |\n   *\n   * In most cases, `'>'` and `'<'` notations are enough to control the slider\n   * because they respect `perPage` and `perMove` options.\n   *\n   * @example\n   * ```ts\n   * var splide = new Splide();\n   *\n   * // Goes to the slide 1:\n   * splide.go( 1 );\n   *\n   * // Increments the index:\n   * splide.go( '+2' );\n   *\n   * // Goes to the next page:\n   * splide.go( '>' );\n   *\n   * // Goes to the page 2:\n   * splide.go( '>2' );\n   * ```\n   *\n   * @param control - A control pattern.\n   *\n   * @return `this`\n   */\n  go( control: number | string ): this {\n    this._Components.Controller.go( control );\n    return this;\n  }\n\n  /**\n   * Registers an event handler.\n   *\n   * @example\n   * ```ts\n   * var splide = new Splide();\n   *\n   * // Listens to a single event:\n   * splide.on( 'move', function() {} );\n   *\n   * // Listens to multiple events:\n   * splide.on( 'move resize', function() {} );\n   *\n   * // Appends a namespace:\n   * splide.on( 'move.myNamespace resize.myNamespace', function() {} );\n   * ```\n   *\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\n   * @param callback - A callback function.\n   *\n   * @return `this`\n   */\n  on<K extends keyof EventMap>( events: K, callback: EventMap[ K ] ): this;\n  on( events: string | string[], callback: EventBusCallback ): this;\n  on( events: string | string[], callback: EventBusCallback ): this {\n    this.event.on( events, callback, null, DEFAULT_USER_EVENT_PRIORITY );\n    return this;\n  }\n\n  /**\n   * Removes the registered all handlers for the specified event or events.\n   * If you want to only remove a particular handler, use namespace to identify it.\n   *\n   * @example\n   * ```ts\n   * var splide = new Splide();\n   *\n   * // Removes all handlers assigned to \"move\":\n   * splide.off( 'move' );\n   *\n   * // Only removes handlers that belong to the specified namespace:\n   * splide.off( 'move.myNamespace' );\n   * ```\n   *\n   * @param events - An event name or names separated by spaces. Use a dot(.) to append a namespace.\n   *\n   * @return `this`\n   */\n  off<K extends keyof EventMap>( events: K | K[] | string | string[] ): this {\n    this.event.off( events );\n    return this;\n  }\n\n  /**\n   * Emits an event and triggers registered handlers.\n   *\n   * @param event - An event name to emit.\n   * @param args  - Optional. Any number of arguments to pass to handlers.\n   *\n   * @return `this`\n   */\n  emit<K extends keyof EventMap>( event: K, ...args: Parameters<EventMap[ K ]> ): this;\n  emit( event: string, ...args: any[] ): this;\n  emit( event: string ): this {\n    // eslint-disable-next-line prefer-rest-params, prefer-spread\n    this.event.emit( event, ...slice( arguments, 1 ) );\n    return this;\n  }\n\n  /**\n   * Inserts a slide at the specified position.\n   *\n   * @example\n   * ```ts\n   * var splide = new Splide();\n   * splide.mount();\n   *\n   * // Adds the slide by the HTML:\n   * splide.add( '<li></li> );\n   *\n   * // or adds the element:\n   * splide.add( document.createElement( 'li' ) );\n   * ```\n   *\n   * @param slides - A slide element, an HTML string that represents a slide, or an array with them.\n   * @param index  - Optional. An index to insert a slide at.\n   *\n   * @return `this`\n   */\n  add( slides: string | HTMLElement | Array<string | HTMLElement>, index?: number ): this {\n    this._Components.Slides.add( slides, index );\n    return this;\n  }\n\n  /**\n   * Removes slides that match the matcher\n   * that can be an index, an array with indices, a selector, or an iteratee function.\n   *\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\n   */\n  remove( matcher: SlideMatcher ): this {\n    this._Components.Slides.remove( matcher );\n    return this;\n  }\n\n  /**\n   * Checks the slider type.\n   *\n   * @param type - A type to test.\n   *\n   * @return `true` if the type matches the current one, or otherwise `false`.\n   */\n  is( type: string ): boolean {\n    return this._options.type === type;\n  }\n\n  /**\n   * Refreshes the slider.\n   *\n   * @return `this`\n   */\n  refresh(): this {\n    this.emit( EVENT_REFRESH );\n    return this;\n  }\n\n  /**\n   * Destroys the slider.\n   *\n   * @param completely - Optional. If `true`, Splide will not remount the slider by breakpoints.\n   *\n   * @return `this`\n   */\n  destroy( completely = true ): this {\n    const { event, state } = this;\n\n    if ( state.is( CREATED ) ) {\n      // Postpones destruction requested before the slider becomes ready.\n      event.on( EVENT_READY, this.destroy.bind( this, completely ), this );\n    } else {\n      forOwn( this._Components, component => {\n        component.destroy && component.destroy( completely );\n      }, true );\n\n      event.emit( EVENT_DESTROY );\n      event.destroy();\n      completely && empty( this.splides );\n      state.set( DESTROYED );\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns options.\n   *\n   * @return An object with the latest options.\n   */\n  get options(): Options {\n    return this._options;\n  }\n\n  /**\n   * Merges options to the current options and emits `updated` event.\n   *\n   * @param options - An object with new options.\n   */\n  set options( options: Options ) {\n    const { _options } = this;\n    merge( _options, options );\n\n    if ( ! this.state.is( CREATED ) ) {\n      this.emit( EVENT_UPDATED, _options );\n    }\n  }\n\n  /**\n   * Returns the number of slides without clones.\n   *\n   * @return The number of slides.\n   */\n  get length(): number {\n    return this._Components.Slides.getLength( true );\n  }\n\n  /**\n   * Returns the active slide index.\n   *\n   * @return The active slide index.\n   */\n  get index(): number {\n    return this._Components.Controller.getIndex();\n  }\n}\n"],"names":["STATES","CREATED","MOUNTED","IDLE","MOVING","DRAGGING","DESTROYED","DEFAULT_EVENT_PRIORITY","empty","array","length","isObject","subject","isNull","isArray","Array","isString","isUndefined","isHTMLElement","HTMLElement","toArray","value","forEach","values","iteratee","includes","indexOf","push","items","arrayProto","prototype","slice","arrayLike","start","end","call","toggleClass","elm","classes","add","name","classList","addClass","split","append","parent","children","appendChild","bind","before","nodes","ref","node","parentNode","insertBefore","matches","selector","filter","child","firstElementChild","forOwn","object","right","keys","Object","reverse","i","key","assign","arguments","source","merge","removeAttribute","elms","attrs","attr","setAttribute","value2","String","create","tag","document","createElement","style","prop","getComputedStyle","style2","display","display2","getAttribute","hasClass","className","contains","rect","target","getBoundingClientRect","remove","removeChild","parseHtml","html","DOMParser","parseFromString","body","prevent","e","stopPropagation","preventDefault","stopImmediatePropagation","query","querySelector","queryAll","querySelectorAll","removeClass","unit","PROJECT_CODE","DATA_ATTRIBUTE","assert","condition","message","Error","apply","func","noop","nextTick","setTimeout","raf","requestAnimationFrame","min","Math","max","floor","ceil","abs","between","number","minOrMax","maxOrMin","exclusive","minimum","maximum","clamp","x","y","sign","format","string","replacements","replacement","replace","pad","ids","EventBus","handlers","off","events","forEachEvent","event","namespace","eventHandlers","handler","_key","_namespace","join","eventNS","fragments","on","callback","priority","_event","_callback","_priority","sort","handler1","handler2","offBy","emit","destroy","EVENT_MOUNTED","EVENT_MOVE","EVENT_MOVED","EVENT_SHIFTED","EVENT_CLICK","EVENT_ACTIVE","EVENT_INACTIVE","EVENT_VISIBLE","EVENT_HIDDEN","EVENT_SLIDE_KEYDOWN","EVENT_REFRESH","EVENT_UPDATED","EVENT_RESIZE","EVENT_RESIZED","EVENT_REPOSITIONED","EVENT_SCROLLED","EVENT_DESTROY","EVENT_NAVIGATION_MOUNTED","EVENT_AUTOPLAY_PLAY","EVENT_AUTOPLAY_PAUSE","EVENT_LAZYLOAD_LOADED","EventInterface","Splide2","listeners","unbind","targets","event2","listener","removeEventListener","data","options","addEventListener","RequestInterval","interval","onInterval","onUpdate","limit","startTime","id","now","Date","rate","paused","count","update","elapsed","pause","cancel","cancelAnimationFrame","resume","rewind","set","time","isPaused","State","initialState","state","is","states","Throttle","duration","_this","ORIENTATION_MAP","marginRight","autoWidth","fixedWidth","paddingLeft","paddingRight","width","left","X","Y","ArrowLeft","ArrowRight","ROLE","TAB_INDEX","ARIA_PREFIX","ARIA_CONTROLS","ARIA_CURRENT","ARIA_LABEL","ARIA_HIDDEN","ARIA_ORIENTATION","ARIA_ROLEDESCRIPTION","ARIA_ATOMIC","ARIA_LIVE","ALL_ATTRIBUTES","CLASS_ROOT","CLASS_SLIDER","CLASS_TRACK","CLASS_LIST","CLASS_SLIDE","CLASS_CLONE","CLASS_CONTAINER","CLASS_ARROWS","CLASS_ARROW","CLASS_ARROW_PREV","CLASS_ARROW_NEXT","CLASS_PAGINATION","CLASS_PROGRESS","CLASS_PROGRESS_BAR","CLASS_AUTOPLAY","CLASS_PLAY","CLASS_PAUSE","CLASS_ACTIVE","CLASS_PREV","CLASS_NEXT","CLASS_VISIBLE","CLASS_LOADING","STATUS_CLASSES","SLIDE","LOOP","FADE","Slide","index","slideIndex","slide","destroyed","destroyEvents","Components","root","isNavigation","updateOnMove","i18n","resolve","Direction","styles","isClone","container","focusableNodes","initNavigation","label","slideX","controls","splides","map","splide","updateActivity","isActive","onMove","currIndex","visible","hidden","trackRect","Elements","track","slideRect","isVisible","slideFocus","self","active","curr","cloneStatus","mount","slideLabel","type","useContainer","_style","isWithin","from","distance","diff","INTERVAL_DATA_ATTRIBUTE","SCROLL_LISTENER_OPTIONS","passive","capture","POINTER_MOVE_EVENTS","POINTER_UP_EVENTS","IE_ARROW_KEYS","KEYBOARD_EVENT","SRC_DATA_ATTRIBUTE","SRCSET_DATA_ATTRIBUTE","IMAGE_SELECTOR","TRIGGER_KEYS","Components2","initialOptions","points","currPoint","throttledObserve","observe","completely","item","predicate","item2","point","newOptions","breakpoints","onMatch","setup","isMin","mediaQuery","n","m","matchMedia","axisOnly","direction","orient","slider","list","elements","slides","error","console","autoplay","find","arrows","prev","next","bar","play","collect","prefix","uniqueId","carousel","tagName","role","getClasses","concat","drag","Slides2","init","register","Slide2","get","excludeClones","matcher","Slide1","getIn","page","Controller","toIndex","hasFocus","perPage","getAt","forEachItem","images","img","removeNode","getLength","isEnough","vertical","rootRect","Slides","cssPadding","resize","newRect","height","cssHeight","cssTrackHeight","gap","cssSlideSize","fixedHeight","autoHeight","padding","heightRatio","totalSize","withoutGap","getGap","parseFloat","window","this","listSize","slideSize","sliderSize","getPadding","cloneCount","clones","computeCloneCount","isHead","clone","cloneNode","cloneDeep","generate","clones2","div","fixedSize","flickMaxPages","Transition","Layout","reposition","isBusy","Scroll","jump","translate","toPosition","position","preventLoop","destination","exceededMin","exceededMax","getPosition","exceededLimit","shift","loop","transform","backwards","excess","getLimit","size","trimming","focus","trimSpace","trim","getEnd","waitForTransition","move","dest","go","minDistance","Infinity","slideCount","perMove","forcePerMove","Move","isLoop","isSlide","prevIndex","scroll","useIndex","snap","toDest","setIndex","getNext","getAdjacent","getPrev","computeDestIndex","epsilon","incremental","toPage","closest","control","allowSameIndex","indicator","match","parse","useScroll","speed","getIndex","created","wrapper","createArrow","prev2","arrow","arrowPath","nextIndex","prevLabel","last","nextLabel","first","disabled","hovered","focused","initButton","forPause","button","resetProgress","manual","autoToggle","updateInterval","pauseOnHover","pauseOnFocus","listen","cover","cover2","src","toggle","scrollCallback","suppressConstraint","friction","clear","onScrolled","t","easingFunc","pow","basePosition","baseEvent","prevBaseEvent","isFree","dragging","clickPrevented","exceeded","disable","onPointerDown","noDrag","isTouch","isTouchEvent","onPointerMove","onPointerUp","save","thresholds","isObj","cancelable","diffCoord","expired","diffTime","hasExceeded","dragMinThreshold","mouse","touch","velocity","computeVelocity","flickPower","computeDestination","rewindByDrag","onClick","orthogonal","coordOf","getBaseEvent","timeStamp","changedTouches","TouchEvent","isDragging","keyboard","onKeydown","_disabled","onUpdated","normalizedKey","isSequential","lazyLoad","_Slide","_img","_spinner","srcset","spinner","parentElement","loadNext","preloadPages","load","onLoad","pagination","li","class","text","pageX","createPagination","preventScroll","isParent","instance","remount","live","Autoplay","onWheel","deltaY","releaseWheel","wheel","DEFAULTS","forcePerPage","easing","Fade","done","endCallback","transition","rewindSpeed","getSpeed","Splide","_options","_Extensions","_Splide","defaults","JSON","Extensions","_Components","_Transition","ComponentConstructors","Component","component","_this2","sync","Sync","refresh"],"mappings":"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"}